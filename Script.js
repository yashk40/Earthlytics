const canvas = document.getElementById("globe");

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);

const renderer = new THREE.WebGLRenderer({
  antialias: true,
  alpha: true,
});


renderer.setClearColor(0x000000, 0);
renderer.setSize(500,500);
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

const container = document.getElementById('globe-container');

let canvasAppended = false;
renderer.domElement.style.display = 'none';
renderer.domElement.style.opacity = '0';
renderer.domElement.style.transition = 'opacity 250ms ease';


function onWindowResize() {
 
  const cw = container.clientWidth || container.offsetWidth || 500;
  const ch = container.clientHeight || container.offsetHeight || cw || 500;
  
 
  let size = Math.min(cw, ch, 500);
  if (!size || size <= 0) size = Math.min(cw || 500, 500);
 
  const isMobile = window.innerWidth <= 768;
  const maxSize = isMobile ? 300 : 500;
  const finalSize = Math.min(size, maxSize);
  
  renderer.setSize(finalSize, finalSize);
  
  // Update camera aspect ratio
  camera.aspect = 1;
  camera.updateProjectionMatrix();
  
  // Update renderer pixel ratio for better performance on mobile
  const pixelRatio = isMobile ? Math.min(window.devicePixelRatio, 1.5) : Math.min(window.devicePixelRatio, 2);
  renderer.setPixelRatio(pixelRatio);
}

// Add resize event listener
window.addEventListener('resize', onWindowResize);

// Initial resize call
onWindowResize();

const sphereGeom = new THREE.SphereGeometry(5,50,50);

// Dynamic loading bar with welcome screen hide
function hideWelcomeWithGsap() {
  const welcomeEl = document.getElementById('Welcome-screen');
  const loadingProgress = document.getElementById('loading-progress');
  const loadingText = document.getElementById('loading-text');
  
  if (!welcomeEl || !loadingProgress || !loadingText) return;
  
  const totalTime = 4000; // 4 seconds total
  const animationTime = 2000; // 2 seconds for animation
  let startTime = Date.now();
  

  
  // Update loading bar and text dynamically
  function updateLoadingBar() {
    const elapsed = Date.now() - startTime;
    const progress = Math.min((elapsed / totalTime) * 100, 100);
    
    // Update progress bar
    loadingProgress.style.width = progress + '%';
    
    // Update loading text with countdown
    const remaining = Math.ceil((totalTime - elapsed) / 1000);
    if (remaining > 0) {
      loadingText.textContent = `Loading...`;
    } else {
      loadingText.textContent = 'Opening...';
    }
    
    // Continue updating until animation starts
    if (elapsed < totalTime) {
      requestAnimationFrame(updateLoadingBar);
    }
  }
  
  // Start the loading animation
  updateLoadingBar();
  
  if (typeof gsap !== 'undefined') {
    gsap.to(welcomeEl, {
      y: '-100%', // This will move the element up by its full height
      duration: 2,
      delay: 4,
      ease: 'power2.out',
      onComplete: () => { welcomeEl.style.display = 'none'; }
    });
  } else {
    welcomeEl.style.transition = 'transform 2s ease-out';
    welcomeEl.style.transform = 'translateY(-100%)';
    setTimeout(() => { welcomeEl.style.display = 'none'; }, 2000);
  }
}
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', hideWelcomeWithGsap);
} else {
  hideWelcomeWithGsap();
}

// (Welcome screen logic removed)

// Helper: reveal canvas after at least one frame rendered
function revealGlobeCanvas(onShown){
  if (!canvasAppended) {
    container.appendChild(renderer.domElement);
    canvasAppended = true;
  }
  // Ensure correct size now that it's in the layout tree
  onWindowResize();
  // Pre-render a few frames before revealing to avoid any blank/white flash
  requestAnimationFrame(() => {
    renderer.render(scene, camera);
    requestAnimationFrame(() => {
      renderer.render(scene, camera);
      requestAnimationFrame(() => {
        renderer.render(scene, camera);
        renderer.domElement.style.display = 'block';
        // Reveal with a tiny delay for compositor to swap buffers cleanly
        setTimeout(() => {
          renderer.domElement.style.opacity = '1';
          if (typeof onShown === 'function') onShown();
        }, 60);
      });
    });
  });
}

// (Welcome screen reveal helper removed)

const globe_image = new THREE.TextureLoader().load(
  "https://i.postimg.cc/0Ndr7GpN/earth-world-map-3d-model-low-poly-max-obj-fbx-c4d-ma-blend.jpg",
  () => { revealGlobeCanvas(); },
  undefined,
  () => { revealGlobeCanvas(); }
);

const sphereMat = new THREE.ShaderMaterial({
	vertexShader: document.getElementById('vertexShader').textContent,
	fragmentShader: document.getElementById('fragmentShader').textContent,
	uniforms: {
		globeTexture: {
			value: globe_image,
		}
	}
});

const sphere = new THREE.Mesh(
  sphereGeom, sphereMat
);

const outerGlowMat = new THREE.ShaderMaterial({
	vertexShader: document.getElementById('atmosphereVertexShader').textContent,
	fragmentShader: document.getElementById('atmosphereFragmentShader').textContent,
	side: THREE.BackSide
});

const outer_glow = new THREE.Mesh(
	sphereGeom, outerGlowMat
);

outer_glow.scale.set(1.01, 1.01, 1.01);

console.log(sphere);

scene.add(outer_glow);

const group = new THREE.Group();
group.add(sphere);
scene.add(group);

camera.position.z = 10;

const mouse = {
	x: 0,
	y: 0
}

// Touch controls for mobile
let touchStartX = 0;
let touchStartY = 0;
let isTouching = false;

// Add touch event listeners for mobile
container.addEventListener('touchstart', (e) => {
  e.preventDefault();
  isTouching = true;
  touchStartX = e.touches[0].clientX;
  touchStartY = e.touches[0].clientY;
});

container.addEventListener('touchmove', (e) => {
  e.preventDefault();
  if (isTouching) {
    const touchX = e.touches[0].clientX;
    const touchY = e.touches[0].clientY;
    
    // Convert touch movement to mouse-like coordinates
    mouse.x = (touchX / window.innerWidth) * 2 - 1;
    mouse.y = -(touchY / window.innerHeight) * 2 + 1;
  }
});

container.addEventListener('touchend', (e) => {
  e.preventDefault();
  isTouching = false;
});

// Prevent default touch behaviors
container.style.touchAction = 'none';

// Lenis smooth scroll setup
let lenis = null;
try {
  if (typeof Lenis !== 'undefined') {
    lenis = new Lenis({
      smoothWheel: true,
      smoothTouch: true,
      lerp: 0.1
    });
  }
} catch (e) {
  // ignore
}

function raf(time){
  if (lenis && typeof lenis.raf === 'function') {
    lenis.raf(time);
  }
  renderer.render(scene, camera);
	sphere.rotation.y -= 0.002;
	sphere.rotation.z -= 0.002;
	var scale = Math.random() * (1.013 - 1.01) + 1.015;
	outer_glow.scale.set(scale, scale, scale);

	gsap.to(group.rotation, {
		y: mouse.x * 0.1,
		x: -mouse.y * 0.1,
		duration: 0.5,
		ease: "power2.out"
	});
  requestAnimationFrame(raf);
}
requestAnimationFrame(raf);

addEventListener('mousemove', (event) => {
	if (!isTouching) { // Only respond to mouse when not touching
		mouse.x = (event.clientX / innerWidth) *  2 - 1;
		mouse.y = -(event.clientY / innerHeight) *  2 + 1;
	}
})

// Add mobile-specific optimizations
if (window.innerWidth <= 768) {
  // Reduce animation complexity on mobile for better performance
  sphere.rotation.y -= 0.001;
  sphere.rotation.z -= 0.001;
}

// Mobile Navigation Functionality
document.addEventListener('DOMContentLoaded', function() {
  const hamburger = document.querySelector('.hamburger');
  const navMenu = document.querySelector('.nav-menu');
  
  if (hamburger && navMenu) {
    hamburger.addEventListener('click', function() {
      hamburger.classList.toggle('active');
      navMenu.classList.toggle('active');
    });
    
    // Close menu when clicking on a nav link
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', () => {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
      });
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
        hamburger.classList.remove('active');
        navMenu.classList.remove('active');
      }
    });
  }
  
  // Add interactivity to metric cards
  const metricCards = document.querySelectorAll('.metric-card');
  metricCards.forEach(card => {
    card.addEventListener('click', function() {
      // Add a subtle animation when clicked
      gsap.to(card, {
        scale: 0.95,
        duration: 0.1,
        yoyo: true,
        repeat: 1
      });
    });
  });
  
  // Add interactivity to CTA button
  const ctaButton = document.querySelector('.cta-button');
  if (ctaButton) {
    ctaButton.addEventListener('click', function() {
      // Add a satisfying click animation
      gsap.to(ctaButton, {
        scale: 0.95,
        duration: 0.1,
        yoyo: true,
        repeat: 1
      });
      
      // Scroll to second page
      const second = document.getElementById('Second-page');
      if (second) {
        if (lenis && typeof lenis.scrollTo === 'function') {
          lenis.scrollTo(second, { offset: 0 });
        } else {
          second.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    });
  }
  
  // Add smooth scrolling for navigation links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        if (lenis && typeof lenis.scrollTo === 'function') {
          lenis.scrollTo(target, { offset: 0 });
        } else {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    });
  });
  
  // Add scroll indicator functionality
  const scrollIndicator = document.querySelector('.scroll-indicator');
  if (scrollIndicator) {
    scrollIndicator.addEventListener('click', function() {
      // Scroll to the next section or trigger some action
      if (lenis && typeof lenis.scrollTo === 'function') {
        lenis.scrollTo(window.innerHeight);
      } else {
        window.scrollTo({ top: window.innerHeight, behavior: 'smooth' });
      }
    });
  }
  
  // Add hover effects for metric cards
  metricCards.forEach(card => {
    card.addEventListener('mouseenter', function() {
      gsap.to(card, {
        y: -5,
        duration: 0.3,
        ease: "power2.out"
      });
    });
    
    card.addEventListener('mouseleave', function() {
      gsap.to(card, {
        y: 0,
        duration: 0.3,
        ease: "power2.out"
      });
    });
  });
});






async function Data() {
  try {
    const response = await fetch("https://carbon-emission.ykumawat006-372.workers.dev/");
    const data = await response.json();

    

    const Carbon = document.getElementById("CO2-upd");
    if (Carbon) {
      Carbon.textContent = `CO2 ${data.CurrentIndexValueDisplay}`;
    }

    const detailsCO2 = document.getElementById("details-co2");
    if (detailsCO2 && data && data.CurrentIndexValueDisplay) {
      detailsCO2.textContent = data.CurrentIndexValueDisplay;
    }
  } catch (error) {
    console.error("Error fetching CO2 data:", error);
  }
}

document.addEventListener("DOMContentLoaded", Data);


async function updateIceMeltToday() {
  try {
    const response = await fetch("https://ice-melted.ykumawat006-372.workers.dev/");
    if (!response.ok) throw new Error("Network response not OK");

    const data = await response.json();
    // Example: { date: "...", estimatedMeltTodayGt: 3.456, rateGtPerDay: 1.917, rateGtPerSecond: 2.2e-5 }

    document.getElementById("iceMeltToday").textContent =
      `Ice Melt Today: ${data.estimatedMeltTodayGt.toFixed(3)} Gt`;

  } catch (error) {
    console.error("Error fetching ice melt data:", error);
    document.getElementById("iceMeltToday").textContent = "Error loading data";
  }
}

// Initial call
updateIceMeltToday();
// Update every second
setInterval(updateIceMeltToday, 1000);



async function updateGlobalTempRise() {
  try {
    const response = await fetch("https://global-temp-rise.ykumawat006-372.workers.dev/");
    if (!response.ok) throw new Error("Network response not OK");

    const data = await response.json();
    // Example data: { date: "...", estimatedTempRiseC: 1.204, rateCPerYear: 0.02, rateCPerSecond: 6.34e-10 }

    document.getElementById("global-temp-rise").textContent =
      `Rise Today: ${data.estimatedTempRiseC.toFixed(3)} °C`;

  } catch (error) {
    console.error("Error fetching global temp rise:", error);
    const el = document.getElementById("global-temp-rise");
    if (el) el.textContent = "Error loading data";
  }
}

// Initial call
updateGlobalTempRise();
// Update every second
setInterval(updateGlobalTempRise, 1000);






async function updateForestLost() {
  try {
    const response = await fetch("https://forest-lost.ykumawat006-372.workers.dev/");
    if (!response.ok) throw new Error("Network response not OK");

    const data = await response.json();
    // Example: { estimatedForestLostKm2: 100123.45, rateKm2PerYear: 1000, ... }

    document.getElementById("forestLost").textContent =
      `Forest Lost: ${data.estimatedForestLostKm2.toFixed(2)} km²`;

  } catch (error) {
    console.error("Error fetching forest lost data:", error);
    document.getElementById("forestLost").textContent = "Error loading data";
  }
}

// Initial call
updateForestLost();
// Update every second
setInterval(updateForestLost, 1000);

// Sea Level Chart based on provided HDR-like data
function initSeaLevelChart() {
  const canvas = document.getElementById('seaLevelChart');
  if (!canvas || typeof Chart === 'undefined') return;

  // Parse embedded data: columns [yearFloat, value1, value2]
  const raw = `HDR Header_End-------------------------------------
1993.0109589    -0.230726    -0.445896
1993.0301370    -0.303428    -0.466597
1993.0493151    -0.460243    -0.472719
1993.0684932    -0.599208    -0.454883
1993.0876712    -0.635877    -0.425817
1993.1068493    -0.570103    -0.428338
1993.1260274    -0.509445    -0.428794
1993.1452055    -0.330038    -0.424755
1993.1643836    -0.193289    -0.423003
1993.1835616    -0.253411    -0.420715
1993.2027397    -0.307533    -0.416704
1993.2219178    -0.423890    -0.408239
1993.2410959    -0.583445    -0.411499
1993.2602740    -0.615283    -0.443668
1993.2794521    -0.534001    -0.477490
1993.2986301    -0.433261    -0.515472
1993.3178082    -0.359379    -0.544253
1993.3369863    -0.482812    -0.556466
1993.3561644    -0.557807    -0.559747
1993.3753425    -0.649372    -0.562841
1993.3945205    -0.682920    -0.546611
1993.4136986    -0.693363    -0.531251
1993.4328767    -0.644804    -0.498515
1993.4520548    -0.561852    -0.452548
1993.4712329    -0.287191    -0.393139
1993.4904110    -0.221136    -0.351437
1993.5095890    -0.188187    -0.293704
1993.5287671    -0.144110    -0.219591
1993.5479452    -0.114689    -0.136523
1993.5671233    -0.307602    -0.064642
1993.5863014    -0.173768     0.014816
1993.6054795     0.022215     0.093328
1993.6246575     0.185758     0.158136
1993.6438356     0.359738     0.227510
1993.6630137     0.493991     0.325490
1993.6821918     0.518422     0.422177
1993.7013699     0.439158     0.524716
1993.7205479     0.509675     0.612009
1993.7397260     0.574225     0.680785
1993.7589041     0.696414     0.723814
1993.7780822     0.945068     0.740103
1993.7972603     0.971388     0.762411
1993.8164384     0.978725     0.764732
1993.8356164     0.881248     0.754807
1993.8547945     0.665026     0.748150
1993.8739726     0.639930     0.731467
1993.8931507     0.530564     0.720887
1993.9123288     0.484898     0.706377
1993.9315068     0.636503     0.671661
1993.9506849     0.794919     0.635179
1993.9698630     0.876173     0.602562
1993.9890411     0.848135     0.585275
1994.0082192     0.568798     0.557468
1994.0273973     0.336693     0.495420
1994.0465753     0.346374     0.387955
1994.0657534     0.374986     0.280191
1994.0849315     0.234630     0.198970
1994.1041096     0.078074     0.151417
1994.1232877    -0.172267     0.129488
1994.1424658    -0.093708     0.119635
1994.1616438     0.117154     0.100504
1994.1808219     0.140814     0.093930
1994.2000000     0.139334     0.106433
1994.2191781     0.257699     0.140996
1994.2383562     0.202803     0.162782
1994.2575342     0.175464     0.136272
1994.2767123     0.190604     0.091215
1994.2958904     0.138803     0.039357
1994.3150685     0.102360    -0.034707
1994.3342466    -0.121434    -0.088259
1994.3534247    -0.264700    -0.133853
1994.3726027    -0.327389    -0.158659
1994.3917808    -0.408872    -0.180980
1994.4109589    -0.279165    -0.212153
1994.4301370    -0.234888    -0.214465
1994.4493151    -0.032644    -0.195134
1994.4684932    -0.062088    -0.164696
1994.4876712    -0.178198    -0.119200
1994.5068493    -0.142242    -0.067783
1994.5260274    -0.090717     0.004878
1994.5452055    -0.053452     0.069166
1994.5643836     0.000590     0.148188
1994.5835616     0.183588     0.251670
1994.6027397     0.419064     0.363068
1994.6219178     0.545950     0.480752
1994.6410959     0.649111     0.596378
1994.6602740     0.753135     0.715792
1994.6794521     0.860346     0.822989
1994.6986301     0.968439     0.913866
1994.7178082     0.987181     1.010257
1994.7369863     1.075315     1.103744
1994.7561644     1.148356     1.177682
1994.7753425     1.236962     1.224587
1994.7945205     1.413470     1.253671
1994.8136986     1.490494     1.263125
1994.8328767     1.418578     1.259407
1994.8520548     1.282484     1.242869
1994.8712329     1.230202     1.237221
1994.8904110     1.072265     1.229078
1994.9095890     1.041850     1.197846
1994.9287671     0.999514     1.169396
1994.9479452     1.186136     1.131231
1994.9671233     1.340179     1.089607
1994.9863014     1.209404     1.085973
1995.0054795     1.162532     1.091333
1995.0246575     0.938995     1.071271
1995.0438356     0.855587     1.004370
1995.0630137     1.039559     0.909320
1995.0821918     1.090088     0.827553
1995.1013699     0.818961     0.764460
1995.1205479     0.584020     0.741384
1995.1397260     0.484734     0.715384
1995.1589041     0.473500     0.654819
1995.1780822     0.594692     0.587630
1995.1972603     0.731316     0.551455
1995.2164384     0.621582     0.542870
1995.2356164     0.494476     0.545636
1995.2547945     0.485391     0.527135
1995.2739726     0.493387     0.481206
1995.2931507     0.506749     0.427482
1995.3123288     0.509629     0.388914
1995.3315068     0.306995     0.385457
1995.3506849     0.181334     0.394379
1995.3698630     0.247800     0.395275
1995.3890411     0.274463     0.390804
1995.4082192     0.463369     0.361086
1995.4273973     0.565684     0.339080
1995.4465753     0.501456     0.329649
1995.4657534     0.466501     0.321963
1995.4849315     0.242169     0.331586
1995.5041096     0.108944     0.344051
1995.5232877     0.096453     0.359962
1995.5424658     0.178623     0.404608
1995.5616438     0.361076     0.467348
1995.5808219     0.575550     0.554165
1995.6000000     0.708886     0.672783
1995.6191781     0.903272     0.832272
1995.6383562     1.031158     1.021068
1995.6575342     1.023519     1.209949
1995.6767123     1.176509     1.361940
1995.6958904     1.531856     1.494113
1995.7150685     1.877781     1.583222
1995.7342466     2.061006     1.661265
1995.7534247     1.943471     1.730900
1995.7726027     1.898447     1.779868
1995.7917808     1.705248     1.804838
1995.8109589     1.733546     1.806916
1995.8301370     1.650235     1.795265
1995.8493151     1.617221     1.776739
1995.8684932     1.756586     1.755302
1995.8876712     1.896482     1.757762
1995.9068493     1.956148     1.760786
1995.9452055     1.726948     1.701922
1995.9643836     1.724927     1.614450
1995.9835616     1.757744     1.486100
1996.0027322     1.507411     1.346886
1996.0218579     1.289130     1.308014
1996.0409836     1.056808     1.216261
1996.0601093     0.869685     1.139629
1996.0792350     0.842431     1.051564
1996.0983607     0.997046     0.975056
1996.1174863     0.901170     0.906804
1996.1366120     1.035232     0.859674
1996.1557377     0.965159     0.850709
1996.1748634     0.818843     0.818930
1996.1939891     0.674866     0.742931
1996.2131148     0.632632     0.668389
1996.2322404     0.789002     0.580125
1996.2513661     0.556419     0.497991
1996.2704918     0.313057     0.442858
1996.2896175     0.230293     0.409644
1996.3087432     0.240856     0.394161
1996.3278689     0.225949     0.353914
1996.3469945     0.322644     0.340474
1996.3661202     0.375941     0.344080
1996.3852459     0.493286     0.346536
1996.4043716     0.426778     0.348235
1996.4234973     0.435463     0.364576
1996.4426230     0.345508     0.391227
1996.4617486     0.252399     0.443208
1996.4808743     0.256143     0.513534
1996.5000000     0.373026     0.586700
1996.5191257     0.562495     0.657227
1996.5382514     0.843775     0.732205
1996.5573770     1.126217     0.814086
1996.5765027     1.085272     0.880995
1996.5956284     1.070208     0.944846
1996.6147541     1.020310     1.002161
1996.6338798     0.989330     1.073306
1996.6530055     0.858320     1.156271
1996.6721311     0.947691     1.250817
1996.6912568     1.078329     1.358846
1996.7103825     1.484079     1.479302
1996.7295082     1.872902     1.611926
1996.7486339     1.936183     1.779673
1996.7677596     2.042472     1.951616
1996.7868852     2.104410     2.086184
1996.8060109     2.182947     2.158044
1996.8251366     2.368046     2.143998
1996.8442623     2.495177     2.106714
1996.8633880     2.289436     2.049541
1996.8825137     2.130820     1.942613
1996.9016393     1.746493     1.819541
1996.9207650     1.600624     1.681233
1996.9398907     1.527921     1.579490
1996.9590164     1.142050     1.444669
1996.9781421     1.075301     1.336105
1996.9972678     1.123275     1.265866
1997.0164384     1.210867     1.115481
1997.0356164     1.262310     1.084363
1997.0547945     1.184583     1.046106
1997.0739726     1.007629     1.013288
1997.0931507     0.917831     0.993553
1997.1123288     0.893107     0.953418
1997.1315068     0.769243     0.893983
1997.1506849     0.860732     0.853525
1997.1698630     0.835680     0.811907
1997.1890411     0.849644     0.776474
1997.2082192     0.727397     0.723037
1997.2273973     0.820465     0.682806
1997.2465753     0.633064     0.643092
1997.2657534     0.598934     0.629275
1997.2849315     0.412170     0.626126
1997.3041096     0.407166     0.634321
1997.3232877     0.503304     0.635924
1997.3424658     0.711335     0.645396
1997.3616438     0.821302     0.650365
1997.3808219     0.801148     0.660871
1997.4000000     0.834891     0.678172
1997.4191781     0.718310     0.700471
1997.4383562     0.643657     0.729976
1997.4575342     0.506728     0.770639
1997.4767123     0.562876     0.830926
1997.4958904     0.703994     0.891820
1997.5150685     0.976881     0.960683
1997.5342466     1.187262     1.050927
1997.5534247     1.343738     1.173910
1997.5726027     1.382933     1.308136
1997.5917808     1.338079     1.445316
1997.6109589     1.455855     1.582328
1997.6301370     1.613570     1.717477
1997.6493151     1.770908     1.842071
1997.6684932     1.938617     1.940711
1997.6876712     2.209988     2.037199
1997.7068493     2.403602     2.130521
1997.7260274     2.465082     2.223107
1997.7452055     2.270698     2.311101
1997.7643836     2.206472     2.387432
1997.7835616     2.295752     2.413040
1997.8027397     2.446841     2.380722
1997.8219178     2.562854     2.319642
1997.8410959     2.625593     2.255388
1997.8602740     2.440468     2.188773
1997.8794521     2.112738     2.114382
1997.8986301     1.915361     2.019593
1997.9178082     1.692408     1.918070
1997.9369863     1.606941     1.804339
1997.9561644     1.626229     1.706114
1997.9753425     1.593742     1.644691
1997.9945205     1.649150     1.600591
1998.0136986     1.602018     1.570699
1998.0328767     1.556440     1.549402
1998.0520548     1.559930     1.511094
1998.0712329     1.518458     1.475243
1998.0904110     1.423388     1.425250
1998.1095890     1.415268     1.382418
1998.1287671     1.281449     1.349512
1998.1479452     1.271091     1.304978
1998.1671233     1.199208     1.243452
1998.1863014     1.216530     1.193326
1998.2054795     1.260284     1.153212
1998.2246575     1.159125     1.131952
1998.2438356     0.964724     1.107431
1998.2630137     0.972253     1.085675
1998.2821918     1.054244     1.037756
1998.3013699     1.090111     0.960006
1998.3205479     1.050395     0.885588
1998.3397260     1.003412     0.836685
1998.3589041     0.785259     0.795302
1998.3780822     0.560527     0.758938
1998.3972603     0.489368     0.736496
1998.4164384     0.524599     0.729909
1998.4356164     0.599800     0.736980
1998.4547945     0.726969     0.755966
1998.4739726     0.888136     0.785050
1998.4931507     0.991108     0.817188
1998.5123288     1.067054     0.866397
1998.5315068     0.956139     0.924071
1998.5506849     0.822278     0.981776
1998.5698630     0.778608     1.034426
1998.5890411     0.967486     1.103851
1998.6082192     1.118860     1.176562
1998.6273973     1.246315     1.258003
1998.6465753     1.361991     1.344717
1998.6657534     1.615927     1.429476
1998.6849315     1.721455     1.507636
1998.7041096     1.689112     1.572732
1998.7232877     1.602700     1.636997
1998.7424658     1.541438     1.710147
1998.7616438     1.670926     1.747709
1998.7808219     1.704725     1.751761
1998.8000000     1.824704     1.737572
1998.8191781     2.020333     1.715042
1998.8383562     1.953986     1.707535
1998.8575342     1.757924     1.705006
1998.8767123     1.561414     1.701038
1998.8958904     1.399930     1.679980
1998.9150685     1.473873     1.627293
1998.9342466     1.648164     1.570165
1998.9534247     1.669015     1.527774
1998.9726027     1.635185     1.484593
1998.9917808     1.546144     1.427663
1999.0109589     1.439842     1.367521
1999.0301370     1.376397     1.318484
1999.0493151     1.172790     1.315980
1999.0684932     0.887564     1.300511
1999.0876712     0.932591     1.263510
1999.1068493     1.206827     1.217750
1999.1260274     1.646484     1.170850
1999.1452055     1.495961     1.158969
1999.1643836     1.213139     1.182055
1999.1835616     1.028003     1.204424
1999.2027397     0.954292     1.192412
1999.2219178     1.065864     1.119271
1999.2410959     1.095337     1.068249
1999.2602740     1.133911     1.039845
1999.2794521     1.098716     1.023763
1999.2986301     0.988220     1.003174
1999.3178082     1.036762     0.961940
1999.3369863     0.957503     0.923258
1999.3561644     0.883260     0.890652
1999.3753425     0.768997     0.856873
1999.3945205     0.694751     0.849254
1999.4136986     0.747199     0.838270
1999.4328767     0.840456     0.836803
1999.4520548     0.794710     0.851428
1999.4712329     0.919648     0.886225
1999.4904110     0.937903     0.938866
1999.5095890     0.944301     0.997340
1999.5287671     1.014884     1.064228
1999.5479452     1.082174     1.155412
1999.5671233     1.168519     1.251298
1999.5863014     1.273464     1.367659
1999.6054795     1.442449     1.463617
1999.6246575     1.615370     1.564569
1999.6438356     1.782621     1.682041
1999.6630137     1.985153     1.822251
1999.6821918     1.807923     1.969244
1999.7013699     1.923451     2.119206
1999.7205479     2.139416     2.248269
1999.7397260     2.430411     2.359236
1999.7589041     2.596402     2.423259
1999.7780822     2.792110     2.489844
1999.7972603     2.776937     2.545097
1999.8164384     2.781325     2.578109
1999.8356164     2.561356     2.579478
1999.8547945     2.407186     2.574922
1999.8739726     2.420725     2.543970
1999.8931507     2.436532     2.528994
1999.9123288     2.442732     2.497141
1999.9315068     2.555393     2.454089
1999.9506849     2.513540     2.420923
1999.9698630     2.642158     2.387927
1999.9890411     2.494643     2.367867
2000.0081967     2.173895     2.345681
2000.0273224     2.108692     2.281838
2000.0464481     2.123755     2.205453
2000.0655738     2.255994     2.120339
2000.0846995     2.243057     2.045985
2000.1038251     1.980803     1.991388
2000.1229508     1.826082     1.948563
2000.1420765     1.876131     1.916521
2000.1612022     1.825457     1.863689
2000.1803279     1.682524     1.811038
2000.1994536     1.723266     1.761843
2000.2185792     1.835374     1.720853
2000.2377049     1.780507     1.668923
2000.2568306     1.769197     1.613151
2000.2759563     1.538045     1.568074
2000.2950820     1.457173     1.509816
2000.3142077     1.408762     1.460645
2000.3333333     1.323511     1.432141
2000.3524590     1.276828     1.403066
2000.3715847     1.198945     1.384379
2000.3907104     1.392835     1.364523
2000.4098361     1.523972     1.351200
2000.4289617     1.507524     1.360706
2000.4480874     1.369862     1.391980
2000.4672131     1.278471     1.434043
2000.4863388     1.288849     1.455842
2000.5054645     1.409071     1.467724
2000.5245902     1.558291     1.505749
2000.5437158     1.577509     1.576437
2000.5628415     1.589030     1.663109
2000.5819672     1.630906     1.749317
2000.6010929     1.849752     1.814051
2000.6202186     2.006053     1.892906
2000.6393443     2.058516     2.006902
2000.6584699     2.064723     2.158076
2000.6775956     1.991676     2.318854
2000.6967213     2.267988     2.459205
2000.7158470     2.603472     2.569257
2000.7349727     2.949595     2.654280
2000.7540984     3.077909     2.737712
2000.7732240     3.112913     2.852379
2000.7923497     2.996524     2.939162
2000.8114754     2.823719     2.998759
2000.8306011     2.815611     3.010150
2000.8497268     3.023678     2.978446
2000.8688525     3.049038     2.916361
2000.8879781     3.139845     2.853002
2000.9071038     3.052110     2.810442
2000.9262295     2.792573     2.809796
2000.9453552     2.554153     2.772212
2000.9644809     2.426293     2.729329
2000.9836066     2.440676     2.668059
2001.0027397     2.723005     2.523601
2001.0219178     2.705975     2.476092
2001.0410959     2.649685     2.432452
2001.0602740     2.412373     2.386093
2001.0794521     2.276646     2.362425
2001.0986301     2.174082     2.321502
2001.1178082     2.077172     2.267158
2001.1369863     2.069804     2.199389
2001.1561644     2.173079     2.158615
2001.1753425     2.354703     2.139790
2001.1945205     2.216877     2.118326
2001.2136986     2.039766     2.095021
2001.2328767     2.045403     2.070494
2001.2520548     2.107226     2.029406
2001.2712329     1.980899     1.978636
2001.2904110     1.867429     1.949218
2001.3095890     1.849065     1.938824
2001.3287671     1.803288     1.926992
2001.3479452     1.897773     1.887020
2001.3671233     1.952117     1.850817
2001.3863014     1.946219     1.851619
2001.4054795     1.938916     1.887047
2001.4246575     1.747471     1.946799
2001.4438356     1.655074     2.013039
2001.4630137     1.874649     2.069921
2001.4821918     2.167917     2.130966
2001.5013699     2.341059     2.202769
2001.5205479     2.493932     2.299023
2001.5397260     2.464049     2.401650
2001.5589041     2.495627     2.473989
2001.5780822     2.585140     2.527264
2001.5972603     2.613760     2.599536
2001.6164384     2.578716     2.690207
2001.6356164     2.525701     2.806644
2001.6547945     2.647392     2.927424
2001.6739726     2.991508     3.036893
2001.6931507     3.309970     3.126886
2001.7123288     3.511985     3.205129
2001.7315068     3.582642     3.276980
2001.7506849     3.570361     3.360730
2001.7698630     3.423701     3.436998
2001.7890411     3.282898     3.485496
2001.8082192     3.172364     3.487973
2001.8273973     3.401141     3.451428
2001.8465753     3.677921     3.389504
2001.8657534     3.746456     3.385230
2001.8849315     3.534271     3.330285
2001.9041096     3.253744     3.302463
2001.9232877     3.013044     3.243600
2001.9616438     2.843342     2.994359
2001.9808219     2.949784     2.869119
2002.0000000     2.930235     2.778116
2002.0191781     2.860116     2.716648
2002.0383562     2.570336     2.696692
2002.0575342     2.532348     2.680236
2002.0767123     2.525726     2.654334
2002.0958904     2.521295     2.607529
2002.1150685     2.537047     2.553716
2002.1342466     2.695240     2.516958
2002.1534247     2.716663     2.466339
2002.1726027     2.508988     2.416369
2002.1917808     2.375805     2.357614
2002.2109589     2.239512     2.291199
2002.2301370     2.076778     2.201562
2002.2493151     2.075991     2.126314
2002.2684932     1.992505     2.084489
2002.2876712     1.939307     2.050295
2002.3068493     1.888509     2.006723
2002.3260274     2.039430     1.972670
2002.3452055     2.132565     1.939999
2002.3643836     2.068056     1.916034
2002.3835616     1.847363     1.913032
2002.4027397     1.770306     1.925407
2002.4219178     1.781946     1.915087
2002.4410959     1.776826     1.907354
2002.4602740     1.912286     1.919896
2002.4794521     1.999887     1.972155
2002.4986301     1.946550     2.066161
2002.5178082     2.062964     2.169186
2002.5369863     2.180935     2.280162
2002.5561644     2.317697     2.378415
2002.5753425     2.616356     2.473079
2002.5945205     2.709179     2.560346
2002.6136986     2.775606     2.656283
2002.6328767     2.796565     2.757325
2002.6520548     2.851859     2.838950
2002.6712329     2.731954     2.888736
2002.6904110     2.926398     2.946410
2002.7095890     3.090313     3.013977
2002.7287671     3.052322     3.105493
2002.7479452     3.064427     3.171437
2002.7671233     3.228248     3.213778
2002.7863014     3.383707     3.232258
2002.8054795     3.620207     3.238782
2002.8246575     3.445355     3.251467
2002.8438356     3.113026     3.250598
2002.8630137     3.092715     3.214676
2002.8821918     3.149028     3.155125
2002.9013699     3.166488     3.070825
2002.9205479     3.056608     2.997502
2002.9397260     2.904953     2.951917
2002.9589041     2.847745     2.894670
2002.9780822     2.861505     2.846176
2002.9972603     2.785447     2.814931
2003.0164384     2.702767     2.803888
2003.0356164     2.577491     2.800154
2003.0547945     2.712582     2.784840
2003.0739726     2.885279     2.739088
2003.0931507     2.957219     2.688680
2003.1123288     2.871347     2.641975
2003.1315068     2.709920     2.611139
2003.1506849     2.449740     2.565307
2003.1698630     2.331775     2.505932
2003.1890411     2.282426     2.439074
2003.2082192     2.299964     2.375986
2003.2273973     2.300094     2.310157
2003.2465753     2.350901     2.271042
2003.2657534     2.355499     2.248818
2003.2849315     2.303554     2.238320
2003.3041096     2.117458     2.228178
2003.3232877     2.097709     2.227544
2003.3424658     2.131756     2.205273
2003.3616438     2.187944     2.181863
2003.3808219     2.208688     2.160363
2003.4000000     2.294387     2.163723
2003.4191781     2.150459     2.177742
2003.4383562     2.144814     2.183042
2003.4575342     2.110049     2.194190
2003.4767123     2.147701     2.213040
2003.4958904     2.223877     2.231153
2003.5150685     2.179457     2.282964
2003.5342466     2.288279     2.331831
2003.5534247     2.378336     2.407479
2003.5726027     2.457405     2.498858
2003.5917808     2.616760     2.608950
2003.6109589     2.584612     2.742760
2003.6301370     2.790883     2.871786
2003.6493151     2.970115     2.992207
2003.6684932     3.214698     3.126134
2003.6876712     3.383751     3.254504
2003.7068493     3.449514     3.376817
2003.7260274     3.462123     3.478693
2003.7452055     3.662748     3.572500
2003.7643836     3.772089     3.635489
2003.7835616     3.685435     3.650058
2003.8027397     3.707762     3.664452
2003.8219178     3.814375     3.689743
2003.8410959     3.781605     3.656752
2003.8602740     3.514873     3.613233
2003.8794521     3.579058     3.580380
2003.9178082     3.398822     3.418249
2003.9369863     3.423933     3.332776
2003.9561644     3.422611     3.284792
2003.9753425     3.173904     3.241637
2003.9945205     3.051187     3.222051
2004.0136612     3.097822     3.166055
2004.0327869     3.130998     3.078793
2004.0519126     3.233818     2.976807
2004.0710383     3.065360     2.906862
2004.0901639     2.894861     2.870376
2004.1092896     2.638576     2.817565
2004.1284153     2.504735     2.734170
2004.1475410     2.544397     2.660856
2004.1666667     2.722821     2.621129
2004.1857923     2.622518     2.572982
2004.2049180     2.380446     2.542879
2004.2240437     2.573992     2.522356
2004.2431694     2.707811     2.503771
2004.2622951     2.461546     2.446119
2004.2814208     2.367646     2.386336
2004.3005464     2.320026     2.351121
2004.3196721     2.377130     2.290270
2004.3387978     2.203960     2.225459
2004.3579235     2.084469     2.194310
2004.3770492     2.063505     2.184430
2004.3961749     2.026334     2.194596
2004.4153005     2.124517     2.215427
2004.4344262     2.181199     2.269855
2004.4535519     2.278728     2.334281
2004.4726776     2.411520     2.395779
2004.4918033     2.564606     2.458239
2004.5109290     2.693816     2.513166
2004.5300546     2.664305     2.580049
2004.5491803     2.616983     2.672040
2004.5683060     2.588479     2.764629
2004.5874317     2.618855     2.844269
2004.6065574     2.783149     2.925730
2004.6256831     3.106644     3.026733
2004.6448087     3.244824     3.141803
2004.6639344     3.281366     3.262636
2004.6830601     3.426961     3.371958
2004.7021858     3.573339     3.480328
2004.7213115     3.652606     3.560822
2004.7404372     3.675979     3.612144
2004.7595628     3.602753     3.654351
2004.7786885     3.758476     3.676065
2004.7978142     3.831094     3.676607
2004.8169399     3.706720     3.650839
2004.8360656     3.661232     3.620828
2004.8551913     3.622387     3.606432
2004.8743169     3.578216     3.576842
2004.8934426     3.420689     3.535966
2004.9125683     3.405881     3.518574
2004.9316940     3.473188     3.500741
2004.9508197     3.492170     3.477242
2004.9699454     3.463214     3.427271
2004.9890710     3.550186     3.382496
2005.0082192     3.434395     3.317964
2005.0273973     3.178443     3.282201
2005.0465753     3.062492     3.233799
2005.0657534     3.178470     3.162216
2005.0849315     3.184343     3.144705
2005.1041096     3.206069     3.110819
2005.1232877     3.075993     3.096685
2005.1424658     2.977527     3.062309
2005.1616438     3.004610     2.997443
2005.1808219     3.129426     2.942556
2005.2000000     3.051239     2.889967
2005.2191781     2.753103     2.853754
2005.2383562     2.594682     2.824311
2005.2575342     2.690352     2.792611
2005.2767123     2.732772     2.744970
2005.2958904     2.750076     2.722815
2005.3150685     2.712540     2.735656
2005.3342466     2.719313     2.762224
2005.3534247     2.700657     2.783596
2005.3726027     2.851840     2.796279
2005.3917808     2.868675     2.810141
2005.4109589     2.833788     2.815459
2005.4301370     2.882709     2.829884
2005.4493151     2.846915     2.851521
2005.4684932     2.874836     2.864341
2005.4876712     2.760396     2.893105
2005.5068493     2.849141     2.941684
2005.5260274     2.895395     2.978274
2005.5452055     2.967212     3.023757
2005.5643836     3.127557     3.080293
2005.5835616     3.270999     3.167792
2005.6027397     3.212018     3.259861
2005.6219178     3.256259     3.359251
2005.6410959     3.383660     3.453502
2005.6602740     3.547891     3.494245
2005.6794521     3.677757     3.587510
2005.6986301     3.789906     3.688448
2005.7178082     3.815468     3.788129
2005.7561644     4.017121     3.935402
2005.7753425     4.019520     3.996259
2005.7945205     4.053707     4.059898
2005.8136986     4.058711     4.124343
2005.8328767     4.051024     4.135475
2005.8520548     4.164613     4.142294
2005.8712329     4.299021     4.143271
2005.8904110     4.331028     4.140346
2005.9095890     4.224533     4.125440
2005.9287671     4.078492     4.095155
2005.9479452     4.028308     4.032507
2005.9671233     4.027383     3.928091
2005.9863014     3.924561     3.814609
2006.0054795     3.778460     3.722315
2006.0246575     3.600781     3.631765
2006.0438356     3.359269     3.531714
2006.0630137     3.309691     3.426301
2006.0821918     3.393892     3.334631
2006.1013699     3.263543     3.256011
2006.1205479     3.127843     3.180161
2006.1397260     3.078674     3.113923
2006.1589041     3.099527     3.056436
2006.1780822     3.070880     2.997278
2006.1972603     2.918127     2.950967
2006.2164384     2.763132     2.929075
2006.2356164     2.792310     2.896846
2006.2547945     2.861471     2.862768
2006.2739726     2.846737     2.836866
2006.2931507     2.930816     2.845526
2006.3123288     2.788614     2.868614
2006.3315068     2.792820     2.890041
2006.3506849     2.837770     2.905775
2006.3698630     2.996063     2.925973
2006.3890411     2.970921     2.942950
2006.4082192     2.985161     2.978794
2006.4273973     3.003070     3.031898
2006.4465753     3.028524     3.078497
2006.4657534     3.083603     3.105785
2006.4849315     3.111215     3.151404
2006.5041096     3.270758     3.206685
2006.5232877     3.257154     3.253812
2006.5424658     3.241662     3.290717
2006.5616438     3.381489     3.325602
2006.5808219     3.482693     3.399355
2006.6000000     3.427206     3.472860
2006.6191781     3.360671     3.573726
2006.6383562     3.397573     3.691922
2006.6575342     3.774987     3.797795
2006.6767123     3.932300     3.867920
2006.6958904     4.164951     3.960938
2006.7150685     4.305428     4.078777
2006.7342466     4.334340     4.205558
2006.7534247     4.113818     4.290660
2006.7726027     4.264369     4.335455
2006.7917808     4.421221     4.359813
2006.8109589     4.538607     4.326501
2006.8301370     4.540904     4.270777
2006.8876712     4.072247     4.143601
2006.9068493     3.944275     4.043081
2006.9260274     3.982764     3.933340
2006.9452055     3.987486     3.895108
2006.9643836     3.938924     3.851816
2006.9835616     3.834964     3.791377
2007.0027397     3.772723     3.722082
2007.0219178     3.627485     3.647637
2007.0410959     3.505474     3.558367
2007.0602740     3.528302     3.470578
2007.0794521     3.320615     3.398549
2007.0986301     3.312757     3.352725
2007.1178082     3.184057     3.314502
2007.1369863     3.148829     3.273474
2007.1561644     3.186703     3.232867
2007.1753425     3.360305     3.220381
2007.1945205     3.283480     3.225954
2007.2136986     3.136220     3.247922
2007.2328767     3.162841     3.267903
2007.2520548     3.208238     3.274591
2007.2712329     3.362914     3.244213
2007.2904110     3.381768     3.215082
2007.3095890     3.328658     3.217957
2007.3287671     3.246897     3.214980
2007.3479452     3.086898     3.193586
2007.3671233     3.021302     3.152605
2007.3863014     3.162099     3.103838
2007.4054795     3.136048     3.080763
2007.4246575     3.015687     3.074658
2007.4438356     2.994085     3.076060
2007.4630137     2.942870     3.087830
2007.4821918     3.120985     3.086033
2007.5013699     3.191947     3.100886
2007.5205479     3.099514     3.137627
2007.5397260     3.127233     3.197504
2007.5589041     3.145924     3.274940
2007.5780822     3.269725     3.333040
2007.5972603     3.346361     3.379948
2007.6164384     3.532978     3.443182
2007.6356164     3.639789     3.522380
2007.6547945     3.643888     3.620410
2007.6739726     3.614120     3.711925
2007.6931507     3.668620     3.801768
2007.7123288     3.840015     3.879952
2007.7315068     4.028195     3.939112
2007.7506849     4.093361     4.002234
2007.7698630     4.154944     4.072005
2007.7890411     4.236633     4.153395
2007.8082192     4.172236     4.232501
2007.8273973     4.211983     4.293904
2007.8465753     4.242056     4.331671
2007.8657534     4.401134     4.335880
2007.8849315     4.551967     4.306142
2007.9041096     4.580821     4.264833
2007.9232877     4.433269     4.215870
2007.9424658     4.192819     4.172658
2007.9616438     3.968994     4.110060
2007.9808219     3.800459     4.026071
2008.0000000     3.771312     3.934331
2008.0191257     3.853145     3.843912
2008.0382514     3.837754     3.760776
2008.0573770     3.796064     3.706708
2008.0765027     3.755158     3.652453
2008.0956284     3.619506     3.594844
2008.1147541     3.444594     3.541924
2008.1338798     3.482380     3.509075
2008.1530055     3.312162     3.473338
2008.1721311     3.252834     3.437652
2008.1912568     3.376863     3.400314
2008.2103825     3.542110     3.398039
2008.2295082     3.474437     3.383348
2008.2486339     3.433977     3.381632
2008.2677596     3.283465     3.379913
2008.2868852     3.424124     3.412458
2008.3060109     3.350157     3.425298
2008.3251366     3.296720     3.441118
2008.3442623     3.237362     3.460533
2008.3633880     3.669769     3.481342
2008.3825137     3.657667     3.496091
2008.4016393     3.616818     3.528642
2008.4207650     3.608715     3.568767
2008.4398907     3.470744     3.624005
2008.4590164     3.556869     3.636877
2008.4781421     3.643118     3.657710
2008.4972678     3.657837     3.687602
2008.5163934     3.734512     3.724688
2008.5355191     3.785610     3.788073
2008.5546448     3.845168     3.855689
2008.5737705     3.885843     3.917637
2008.5928962     3.942486     3.995926
2008.6120219     4.041216     4.067053
2008.6311475     4.165411     4.134912
2008.6502732     4.200648     4.200042
2008.6693989     4.362440     4.274222
2008.6885246     4.374656     4.359980
2008.7076503     4.396344     4.431621
2008.7267760     4.431331     4.498472
2008.7459016     4.553463     4.551947
2008.7650273     4.714311     4.592175
2008.7841530     4.685990     4.637931
2008.8032787     4.767064     4.685294
2008.8224044     4.681928     4.737115
2008.8415301     4.724488     4.782222
2008.8606557     4.786456     4.791172
2008.8797814     4.822611     4.779778
2008.8989071     4.897722     4.732536
2008.9180328     4.959427     4.679824
2008.9371585     4.794861     4.674241
2008.9562842     4.583444     4.594738
2008.9754098     4.341891     4.525100
2008.9945355     4.207519     4.430577
2009.0136986     4.150433     4.206764
2009.0328767     4.265505     4.118643
2009.0520548     4.141538     4.040310
2009.0712329     4.044651     3.982124
2009.0904110     3.919131     3.967582
2009.1095890     3.878473     3.939507
2009.1287671     3.715230     3.904635
2009.1479452     3.742030     3.877590
2009.1671233     3.851250     3.866450
2009.1863014     3.897752     3.860186
2009.2054795     3.951659     3.849643
2009.2246575     3.898132     3.856258
2009.2438356     3.944398     3.857149
2009.2630137     3.862754     3.848650
2009.2821918     3.783580     3.832433
2009.3013699     3.774763     3.806402
2009.3205479     3.750052     3.782346
2009.3397260     3.774757     3.765326
2009.3589041     3.751798     3.766510
2009.3780822     3.717388     3.777072
2009.3972603     3.681626     3.795066
2009.4164384     3.791220     3.807391
2009.4356164     3.873405     3.815314
2009.4547945     3.878641     3.830136
2009.4739726     3.936704     3.872358
2009.4931507     3.860978     3.933589
2009.5123288     3.846067     3.987010
2009.5315068     3.885194     4.038483
2009.5506849     4.097384     4.102665
2009.5698630     4.232709     4.178442
2009.5890411     4.272009     4.280789
2009.6082192     4.336662     4.402105
2009.6273973     4.456275     4.537004
2009.6465753     4.618696     4.663628
2009.6657534     4.782105     4.777727
2009.6849315     4.937907     4.900878
2009.7041096     5.099288     5.012288
2009.7232877     5.237004     5.116719
2009.7424658     5.259594     5.208250
2009.7616438     5.380366     5.280514
2009.7808219     5.339355     5.331180
2009.8000000     5.396159     5.355907
2009.8191781     5.442470     5.360674
2009.8383562     5.432481     5.364417
2009.8575342     5.393901     5.340109
2009.8767123     5.321835     5.292423
2009.8958904     5.279908     5.251897
2009.9150685     5.293275     5.203031
2009.9342466     5.161592     5.139061
2009.9534247     4.910187     5.061347
2009.9726027     5.031424     4.981778
2009.9917808     5.002674     4.874799
2010.0109589     4.856753     4.752727
2010.0301370     4.694470     4.645030
2010.0493151     4.605718     4.590268
2010.0684932     4.317097     4.544274
2010.0876712     4.194628     4.497268
2010.1068493     4.192316     4.448373
2010.1260274     4.417336     4.402124
2010.1452055     4.617470     4.354847
2010.1643836     4.579624     4.327796
2010.1835616     4.416696     4.318435
2010.2027397     4.278229     4.301014
2010.2219178     4.180226     4.263607
2010.2410959     4.073640     4.200723
2010.2602740     4.110381     4.135002
2010.2794521     4.035526     4.097549
2010.2986301     4.080673     4.094205
2010.3178082     4.051509     4.101511
2010.3369863     3.988134     4.132988
2010.3561644     4.079621     4.160229
2010.3753425     4.248135     4.195626
2010.3945205     4.245985     4.233549
2010.4136986     4.356929     4.277594
2010.4328767     4.355546     4.332069
2010.4520548     4.354106     4.382093
2010.4712329     4.421978     4.411304
2010.4904110     4.447910     4.436678
2010.5095890     4.478411     4.441754
2010.5287671     4.529837     4.468991
2010.5479452     4.511031     4.504325
2010.5671233     4.474356     4.538268
2010.5863014     4.402609     4.567194
2010.6054795     4.600677     4.602902
2010.6246575     4.672120     4.638663
2010.6438356     4.727465     4.681883
2010.6630137     4.708237     4.734444
2010.6821918     4.799788     4.802387
2010.7013699     4.851688     4.864725
2010.7205479     4.900004     4.932978
2010.7397260     4.947412     5.014007
2010.7589041     5.014091     5.086534
2010.7780822     5.161722     5.141947
2010.7972603     5.286395     5.178329
2010.8164384     5.456723     5.198062
2010.8356164     5.360982     5.187189
2010.8547945     5.298501     5.168388
2010.8739726     5.179134     5.128790
2010.8931507     5.077597     5.076825
2010.9123288     4.849555     5.008724
2010.9315068     4.844883     4.939259
2010.9506849     4.805343     4.857893
2010.9698630     4.818706     4.787505
2010.9890411     4.843818     4.723582
2011.0082192     4.735795     4.663641
2011.0273973     4.566208     4.588877
2011.0465753     4.545642     4.513025
2011.0657534     4.502290     4.428543
2011.0849315     4.310087     4.339285
2011.1041096     4.172004     4.262657
2011.1232877     4.122674     4.195749
2011.1424658     4.058371     4.107500
2011.1616438     4.040493     4.015817
2011.1808219     4.046146     3.950234
2011.2000000     3.964035     3.911812
2011.2191781     3.751397     3.870673
2011.2383562     3.677149     3.830494
2011.2575342     3.719835     3.775751
2011.2767123     3.826206     3.725290
2011.2958904     3.752426     3.692155
2011.3150685     3.696758     3.697841
2011.3342466     3.547804     3.708442
2011.3534247     3.592000     3.724107
2011.3726027     3.665817     3.740331
2011.3917808     3.802576     3.775552
2011.4109589     3.772555     3.828087
2011.4301370     3.860823     3.892571
2011.4493151     3.972225     3.942032
2011.4684932     4.069414     3.986043
2011.4876712     4.169566     4.031840
2011.5068493     4.128162     4.101960
2011.5260274     4.037154     4.181417
2011.5452055     4.061909     4.268544
2011.5643836     4.214747     4.360157
2011.5835616     4.403642     4.453438
2011.6027397     4.575929     4.555051
2011.6219178     4.756370     4.663094
2011.6410959     4.893928     4.777252
2011.6602740     5.009097     4.891788
2011.6794521     5.042680     5.006045
2011.6986301     5.009538     5.117149
2011.7178082     5.089333     5.213407
2011.7369863     5.245570     5.288407
2011.7561644     5.431956     5.337169
2011.7753425     5.575872     5.360944
2011.7945205     5.622684     5.379506
2011.8136986     5.568933     5.392393
2011.8328767     5.447949     5.394686
2011.8520548     5.256663     5.379857
2011.8712329     5.176597     5.350236
2011.8904110     5.205314     5.317373
2011.9095890     5.266204     5.283147
2011.9287671     5.298498     5.269762
2011.9479452     5.309278     5.268398
2011.9671233     5.326926     5.265174
2011.9863014     5.260890     5.274651
2012.0054645     5.327492     5.270445
2012.0245902     5.244382     5.252238
2012.0437158     5.147583     5.229475
2012.0628415     5.290606     5.203791
2012.0819672     5.228346     5.167431
2012.1010929     5.134641     5.110282
2012.1202186     5.104409     5.064159
2012.1393443     5.095767     5.028729
2012.1584699     4.933653     4.976160
2012.1775956     4.813150     4.936513
2012.1967213     4.829274     4.895976
2012.2158470     4.828710     4.847121
2012.2349727     4.817491     4.811600
2012.2540984     4.871523     4.790513
2012.2732240     4.769809     4.783250
2012.2923497     4.664709     4.782167
2012.3114754     4.776084     4.764941
2012.3306011     4.743868     4.760215
2012.3497268     4.747786     4.767541
2012.3688525     4.819525     4.795063
2012.3879781     4.673672     4.837118
2012.4071038     4.774960     4.870412
2012.4262295     4.937452     4.906976
2012.4453552     5.017510     4.966853
2012.4644809     5.043204     5.034881
2012.4836066     5.075734     5.135801
2012.5027322     5.072942     5.228879
2012.5218579     5.286681     5.306147
2012.5409836     5.431770     5.375950
2012.5601093     5.581959     5.440871
2012.5792350     5.612654     5.507538
2012.5983607     5.632866     5.588394
2012.6174863     5.645740     5.665152
2012.6366120     5.627497     5.743342
2012.6557377     5.675731     5.829874
2012.6748634     5.800650     5.933426
2012.6939891     5.977504     6.039507
2012.7131148     6.135476     6.147202
2012.7322404     6.360744     6.249042
2012.7513661     6.544625     6.340776
2012.7704918     6.587592     6.414526
2012.7896175     6.614996     6.468558
2012.8087432     6.544055     6.491465
2012.8278689     6.501338     6.495243
2012.8469945     6.464399     6.487596
2012.8661202     6.463800     6.459227
2012.8852459     6.341634     6.409101
2012.9043716     6.394749     6.372054
2012.9234973     6.475799     6.355893
2012.9426230     6.332277     6.316766
2012.9617486     6.163857     6.256702
2012.9808743     6.210631     6.201579
2013.0000000     6.151383     6.098021
2013.0191781     5.983289     6.037440
2013.0383562     5.900645     5.984772
2013.0575342     6.016881     5.904473
2013.0767123     6.025204     5.876176
2013.0958904     5.847632     5.822335
2013.1150685     5.742513     5.778076
2013.1342466     5.568240     5.747011
2013.1534247     5.649797     5.699547
2013.1726027     5.666811     5.658840
2013.1917808     5.584956     5.608161
2013.2109589     5.621065     5.554933
2013.2301370     5.589705     5.515260
2013.2684932     5.442197     5.426436
2013.2876712     5.316696     5.387008
2013.3068493     5.250849     5.333408
2013.3260274     5.321152     5.280995
2013.3452055     5.284864     5.258743
2013.3643836     5.269538     5.214207
2013.3835616     5.192264     5.190272
2013.4027397     5.170399     5.183936
2013.4219178     5.080724     5.181597
2013.4410959     5.041381     5.182676
2013.4602740     5.101276     5.188166
2013.4794521     5.193826     5.210294
2013.4986301     5.300097     5.248579
2013.5178082     5.294578     5.295509
2013.5369863     5.318947     5.348806
2013.5561644     5.391419     5.397194
2013.5753425     5.514962     5.456543
2013.5945205     5.503097     5.518842
2013.6136986     5.521048     5.546875
2013.6328767     5.536776     5.661560
2013.6520548     5.727962     5.759893
2013.6712329     5.860794     5.850038
2013.7095890     6.236423     6.049690
2013.7287671     6.178084     6.165995
2013.7479452     6.236125     6.268398
2013.7671233     6.278396     6.346712
2013.7863014     6.342962     6.355961
2013.8054795     6.467213     6.369152
2013.8246575     6.547186     6.392110
2013.8438356     6.487310     6.393674
2013.8630137     6.429947     6.363063
2013.8821918     6.355148     6.321015
2013.9013699     6.384700     6.269997
2013.9205479     6.250207     6.223073
2013.9397260     6.002890     6.169476
2013.9589041     5.964535     6.109572
2013.9780822     6.008053     6.043983
2013.9972603     6.124870     5.975623
2014.0164384     6.004935     5.899083
2014.0356164     5.890809     5.868553
2014.0547945     5.764844     5.852463
2014.0739726     5.769467     5.822280
2014.0931507     5.561341     5.788010
2014.1123288     5.728121     5.751955
2014.1315068     5.819729     5.710823
2014.1506849     5.736403     5.676065
2014.1698630     5.816438     5.641863
2014.1890411     5.680443     5.621010
2014.2082192     5.520617     5.573506
2014.2273973     5.452026     5.505431
2014.2465753     5.461646     5.445057
2014.2657534     5.373665     5.368402
2014.2849315     5.300588     5.298580
2014.3041096     5.207054     5.246185
2014.3232877     5.193031     5.208826
2014.3424658     5.126545     5.177900
2014.3616438     5.052042     5.168987
2014.3808219     5.049070     5.177960
2014.4000000     5.115793     5.205731
2014.4191781     5.183314     5.251646
2014.4383562     5.293448     5.326522
2014.4575342     5.381342     5.391796
2014.4767123     5.456991     5.474211
2014.4958904     5.606270     5.558236
2014.5150685     5.800427     5.638626
2014.5342466     5.639510     5.729794
2014.5534247     5.790803     5.826551
2014.5726027     5.872018     5.934203
2014.5917808     5.906824     6.025693
2014.6109589     6.113958     6.104022
2014.6301370     6.252153     6.196449
2014.6493151     6.425865     6.283926
2014.6684932     6.429678     6.370899
2014.6876712     6.505391     6.469317
2014.7068493     6.471348     6.560767
2014.7260274     6.578097     6.637399
2014.7452055     6.654773     6.683305
2014.7643836     6.792585     6.723916
2014.7835616     6.937011     6.750932
2014.8027397     6.941839     6.765831
2014.8219178     6.839023     6.751814
2014.8410959     6.795174     6.739314
2014.8602740     6.748536     6.741742
2014.8794521     6.605443     6.749437
2014.8986301     6.451944     6.734134
2014.9178082     6.542267     6.701520
2014.9369863     6.814440     6.666955
2014.9561644     7.006271     6.636871
2014.9753425     6.804109     6.621360
2014.9945205     6.545499     6.626052
2015.0136986     6.484086     6.621799
2015.0328767     6.477784     6.590610
2015.0520548     6.465842     6.532965
2015.0712329     6.494174     6.497764
2015.0904110     6.503984     6.489643
2015.1095890     6.533740     6.474582
2015.1287671     6.487463     6.438773
2015.1479452     6.487303     6.403168
2015.1671233     6.472411     6.364560
2015.1863014     6.348537     6.324876
2015.2054795     6.155505     6.281078
2015.2246575     6.145394     6.239942
2015.2438356     6.146705     6.199442
2015.2630137     6.146822     6.160557
2015.2821918     6.139565     6.118333
2015.3013699     6.117237     6.088495
2015.3205479     6.122805     6.069077
2015.3397260     6.122446     6.063871
2015.3589041     5.968520     6.058781
2015.3780822     5.886958     6.071956
2015.3972603     5.970637     6.099584
2015.4164384     6.099848     6.130696
2015.4356164     6.101013     6.175942
2015.4547945     6.258140     6.248909
2015.4739726     6.365888     6.342150
2015.4931507     6.402815     6.439280
2015.5123288     6.529655     6.527286
2015.5315068     6.625226     6.624640
2015.5506849     6.726127     6.713558
2015.5698630     6.844804     6.818260
2015.5890411     6.891906     6.942109
2015.6082192     6.977196     7.058658
2015.6273973     7.058409     7.175053
2015.6465753     7.308206     7.275294
2015.6657534     7.517455     7.369887
2015.6849315     7.578593     7.467463
2015.7041096     7.672779     7.569333
2015.7232877     7.628299     7.685629
2015.7424658     7.696143     7.773609
2015.7616438     7.770084     7.823356
2015.7808219     7.894033     7.842487
2015.8000000     8.105068     7.831812
2015.8191781     8.100027     7.825170
2015.8383562     7.965181     7.830384
2015.8575342     7.750771     7.814295
2015.8767123     7.576705     7.775564
2015.8958904     7.568519     7.702268
2015.9150685     7.743070     7.595911
2015.9342466     7.625279     7.493610
2015.9534247     7.545454     7.429039
2015.9726027     7.445403     7.411366
2015.9917808     7.142817     7.390282
2016.0109290     7.044477     7.346273
2016.0300546     7.169630     7.310416
2016.0491803     7.417641     7.275913
2016.0683060     7.378768     7.241298
2016.0874317     7.346988     7.241245
2016.1065574     7.302567     7.240101
2016.1256831     7.234929     7.214097
2016.1448087     7.133863     7.156664
2016.1639344     7.142340     7.096355
2016.1830601     7.034178     7.024441
2016.2021858     6.935603     6.935558
2016.2213115     6.900737     6.861594
2016.2404372     6.835993     6.794982
2016.2595628     6.699757     6.716694
2016.2786885     6.502620     6.646755
2016.2978142     6.569257     6.586561
2016.3169399     6.534353     6.531851
2016.3360656     6.437750     6.483051
2016.3551913     6.404729     6.465307
2016.3743169     6.393857     6.478539
2016.3934426     6.408344     6.489862
2016.4125683     6.396787     6.516076
2016.4316940     6.540069     6.552178
2016.4508197     6.621706     6.588182
2016.4699454     6.671161     6.623752
2016.4890710     6.770282     6.655472
2016.5081967     6.762662     6.689439
2016.5273224     6.728767     6.711985
2016.5464481     6.713986     6.734431
2016.5655738     6.693824     6.762638
2016.5846995     6.702492     6.812496
2016.6038251     6.742988     6.888224
2016.6229508     6.823715     6.974505
2016.6420765     6.925025     7.066962
2016.6612022     7.219009     7.162643
2016.6803279     7.444206     7.249862
2016.6994536     7.505299     7.346779
2016.7185792     7.546102     7.453918
2016.7377049     7.554952     7.558658
2016.7568306     7.487459     7.633991
2016.7759563     7.615247     7.679497
2016.7950820     7.787962     7.733421
2016.8142077     7.867690     7.792222
2016.8333333     7.897000     7.831614
2016.8524590     7.853764     7.859350
2016.8715847     7.990608     7.864781
2016.8907104     8.075310     7.827215
2016.9098361     7.909488     7.776992
2016.9289617     7.737077     7.761991
2016.9480874     7.664127     7.670733
2016.9672131     7.449866     7.557514
2016.9863388     7.415686     7.440909
2017.0054795     7.123698     7.213090
2017.0246575     7.084859     7.093842
2017.0438356     7.142473     6.992092
2017.0630137     7.022656     6.903811
2017.0821918     6.801356     6.880675
2017.1013699     6.710145     6.837442
2017.1205479     6.635864     6.797188
2017.1397260     6.709435     6.748775
2017.1589041     6.695590     6.727815
2017.1780822     6.734597     6.722981
2017.1972603     6.722577     6.722380
2017.2164384     6.706756     6.719305
2017.2356164     6.834015     6.705898
2017.2547945     6.757851     6.680996
2017.2739726     6.704735     6.647378
2017.2931507     6.608187     6.598232
2017.3123288     6.588779     6.550993
2017.3315068     6.471468     6.492106
2017.3506849     6.432034     6.448008
2017.3698630     6.280261     6.413739
2017.3890411     6.281605     6.407196
2017.4082192     6.304035     6.408250
2017.4273973     6.360968     6.430674
2017.4465753     6.396313     6.449035
2017.4657534     6.549301     6.494967
2017.4849315     6.598265     6.558288
2017.5041096     6.673284     6.640896
2017.5232877     6.597283     6.735278
2017.5424658     6.693646     6.838350
2017.5616438     6.851495     6.925703
2017.5808219     7.047505     7.014935
2017.6000000     7.210409     7.110931
2017.6191781     7.323962     7.230455
2017.6383562     7.335477     7.354308
2017.6575342     7.401358     7.454256
2017.6767123     7.537243     7.532404
2017.6958904     7.673004     7.605020
2017.7150685     7.808320     7.675047
2017.7342466     7.751023     7.752515
2017.7534247     7.750838     7.827465
2017.7726027     7.863953     7.884260
2017.7917808     7.954209     7.926679
2017.8109589     8.032685     7.955949
2017.8301370     8.075915     7.987460
2017.8493151     8.048392     8.018962
2017.8684932     8.054779     8.038196
2017.8876712     8.071744     8.027335
2017.9068493     8.034627     7.976900
2017.9260274     8.034352     7.905629
2017.9452055     8.037062     7.825563
2017.9643836     7.856459     7.743730
2017.9835616     7.578774     7.663463
2018.0027397     7.434471     7.591791
2018.0219178     7.327797     7.504506
2018.0410959     7.318280     7.399196
2018.0602740     7.349342     7.291457
2018.0794521     7.389577     7.201494
2018.0986301     7.248796     7.136732
2018.1178082     7.089271     7.092778
2018.1369863     6.886807     7.045895
2018.1561644     6.769108     6.985511
2018.1753425     6.851612     6.916326
2018.1945205     6.932214     6.859821
2018.2136986     6.896325     6.809018
2018.2328767     6.805886     6.780295
2018.2520548     6.766913     6.756344
2018.2712329     6.740257     6.718426
2018.2904110     6.632043     6.689421
2018.3095890     6.628298     6.659727
2018.3287671     6.553545     6.646682
2018.3479452     6.510349     6.645024
2018.3671233     6.671173     6.656883
2018.3863014     6.629080     6.659111
2018.4054795     6.688478     6.663078
2018.4246575     6.751991     6.691681
2018.4438356     6.846987     6.742227
2018.4630137     6.652098     6.782897
2018.4821918     6.664000     6.840666
2018.5013699     6.810971     6.892907
2018.5205479     6.965267     6.948095
2018.5397260     7.037198     7.003344
2018.5589041     7.149006     7.087974
2018.5780822     7.158642     7.191269
2018.5972603     7.248684     7.298825
2018.6164384     7.344229     7.417173
2018.6356164     7.413770     7.535124
2018.6547945     7.593651     7.665005
2018.6739726     7.778983     7.805630
2018.6931507     8.030393     7.922085
2018.7123288     8.098756     8.031581
2018.7315068     8.317937     8.142640
2018.7506849     8.424268     8.238881
2018.7698630     8.296776     8.312175
2018.7890411     8.329699     8.345625
2018.8082192     8.413298     8.356647
2018.8273973     8.459820     8.338626
2018.8465753     8.438625     8.308300
2018.8657534     8.331445     8.277330
2018.8849315     8.197960     8.237108
2018.9041096     8.155742     8.178477
2018.9232877     8.151334     8.098711
2018.9424658     8.018049     8.015180
2018.9616438     7.967698     7.963834
2018.9808219     7.885618     7.928123
2019.0000000     7.741928     7.892713
2019.0191781     7.686842     7.850408
2019.0383562     7.869337     7.810205
2019.0575342     7.876558     7.757545
2019.0767123     7.837056     7.719300
2019.0958904     7.770582     7.716471
2019.1150685     7.656226     7.700904
2019.1342466     7.493760     7.671254
2019.1534247     7.541407     7.638891
2019.1917808     7.562303     7.538616
2019.2109589     7.632138     7.489300
2019.2301370     7.617657     7.461392
2019.2493151     7.490970     7.442814
2019.2684932     7.314468     7.445214
2019.2876712     7.261698     7.442028
2019.3068493     7.270498     7.416112
2019.3260274     7.392781     7.393683
2019.3452055     7.464413     7.369559
2019.3643836     7.533625     7.370058
2019.3835616     7.398893     7.389409
2019.4027397     7.415802     7.412016
2019.4219178     7.273856     7.435377
2019.4410959     7.318955     7.460872
2019.4602740     7.435855     7.487949
2019.4794521     7.473965     7.518711
2019.4986301     7.603032     7.553482
2019.5178082     7.693861     7.627563
2019.5369863     7.777318     7.725323
2019.5561644     7.675757     7.828364
2019.5753425     7.728735     7.942323
2019.5945205     7.940588     8.048420
2019.6136986     8.198794     8.162034
2019.6328767     8.363227     8.279239
2019.6520548     8.499599     8.411151
2019.6712329     8.557902     8.523429
2019.6904110     8.716384     8.617386
2019.7095890     8.832163     8.683062
2019.7287671     8.862970     8.729124
2019.7479452     8.739235     8.757528
2019.7671233     8.786201     8.792464
2019.7863014     8.789876     8.818648
2019.8054795     8.777786     8.826885
2019.8246575     8.755239     8.818340
2019.8438356     8.872319     8.815352
2019.8630137     8.952039     8.805345
2019.8821918     8.906301     8.781225
2019.9013699     8.786063     8.731369
2019.9205479     8.712343     8.686390
2019.9397260     8.696134     8.608757
2019.9589041     8.572797     8.500794
2019.9780822     8.329081     8.387715
2019.9972603     8.350433     8.297473
2020.0163934     8.173622     8.245614
2020.0355191     7.980367     8.181254
2020.0546448     7.888595     8.084423
2020.0737705     7.973882     8.024926
2020.1311475     7.894977     7.876032
2020.1502732     7.912607     7.824651
2020.1693989     7.917497     7.773261
2020.1885246     7.829393     7.764681
2020.2076503     7.715270     7.749859
2020.2267760     7.528928     7.703679
2020.2459016     7.614154     7.672108
2020.2650273     7.704623     7.649717
2020.2841530     7.631277     7.641811
2020.3032787     7.479358     7.638609
2020.3224044     7.628475     7.656452
2020.3415301     7.715971     7.658724
2020.3606557     7.758239     7.660780
2020.3797814     7.686459     7.664394
2020.3989071     7.689508     7.699479
2020.4180328     7.634603     7.729954
2020.4371585     7.723132     7.758633
2020.4562842     7.663796     7.779460
2020.4754098     7.795129     7.820022
2020.4945355     7.902750     7.870707
2020.5136612     7.974079     7.932938
2020.5327869     7.945680     7.983852
2020.5519126     8.051522     8.052364
2020.5710383     8.145671     8.117601
2020.5901639     8.194686     8.192798
2020.6092896     8.181351     8.279968
2020.6284153     8.280403     8.383272
2020.6475410     8.382267     8.475583
2020.6666667     8.579519     8.563628
2020.6857923     8.758615     8.663035
2020.7049180     8.875411     8.772945
2020.7240437     8.882327     8.889224
2020.7431694     8.938071     9.001782
2020.7622951     9.089350     9.097095
2020.7814208     9.170540     9.157119
2020.8005464     9.326920     9.183100
2020.8196721     9.395289     9.188148
2020.8387978     9.437332     9.176552
2020.8579235     9.298831     9.148930
2020.8770492     9.109243     9.103018
2020.8961749     8.927758     9.029143
2020.9153005     8.833709     8.957079
2020.9344262     8.840745     8.897048
2020.9535519     8.757335     8.830859
2020.9726776     8.662043     8.782551
2020.9918033     8.746718     8.753252
2021.0109589     8.769324     8.722229
2021.0301370     8.722776     8.672863
2021.0493151     8.693364     8.615803
2021.0684932     8.749190     8.536322
2021.0876712     8.677082     8.461774
2021.1068493     8.362404     8.370985
2021.1260274     8.205568     8.288044
2021.1452055     8.110870     8.212135
2021.1643836     7.865389     8.145965
2021.1835616     7.952218     8.090973
2021.2027397     7.976311     8.081298
2021.2219178     8.010184     8.088338
2021.2410959     8.153662     8.090979
2021.2602740     8.182154     8.109585
2021.2794521     8.275326     8.115552
2021.2986301     8.268924     8.115683
2021.3178082     8.134644     8.118515
2021.3369863     8.032839     8.085339
2021.3561644     8.005928     8.044631
2021.3753425     7.977486     8.007966
2021.3945205     8.035671     7.995509
2021.4136986     7.855078     8.004506
2021.4328767     7.815779     8.031796
2021.4520548     7.945342     8.074581
2021.4712329     8.156812     8.130393
2021.4904110     8.215622     8.194142
2021.5095890     8.278442     8.294637
2021.5287671     8.390995     8.416574
2021.5479452     8.479795     8.531428
2021.5671233     8.609409     8.599877
2021.5863014     8.759541     8.667400
2021.6054795     8.913213     8.752116
2021.6246575     8.979021     8.846368
2021.6438356     8.772857     8.952042
2021.6630137     8.823324     9.048211
2021.6821918     9.040891     9.134983
2021.7013699     9.239263     9.207887
2021.7205479     9.430855     9.287670
2021.7397260     9.474933     9.393474
2021.7589041     9.540493     9.486029
2021.7780822     9.569349     9.543920
2021.7972603     9.697064     9.558511
2021.8164384     9.725095     9.553562
2021.8356164     9.656322     9.566037
2021.8547945     9.561908     9.567116
2021.8739726     9.370582     9.532625
2021.8931507     9.386313     9.461804
2021.9123288     9.587206     9.378462
2021.9315068     9.550207     9.317683
2021.9506849     9.258930     9.272970
2021.9698630     9.059677     9.240088
2021.9890411     8.975018     9.196406
2022.0082192     9.109307     9.130294
2022.0273973     9.159488     9.060359
2022.0465753     9.074645     9.003012
2022.0657534     8.993171     8.942827
2022.0849315     8.992201     8.873474
2022.1041096     8.920789     8.775398
2022.1232877     8.742810     8.677874
2022.1424658     8.518011     8.591799
2022.1616438     8.350841     8.517391
2022.1808219     8.226623     8.460510
2022.2000000     8.281772     8.404576
2022.2191781     8.299976     8.355968
2022.2383562     8.323500     8.335786
2022.2575342     8.480264     8.331453
2022.2767123     8.417390     8.332931
2022.2958904     8.305340     8.316327
2022.3150685     8.336370     8.289021
2022.3342466     8.311845     8.263382
2022.3534247     8.239922     8.229710
2022.3726027     8.132336     8.207425
2022.3917808     8.054222     8.218942
2022.4109589     8.092753     8.236073
2022.4301370     8.177209     8.265422
2022.4493151     8.216828     8.323903
2022.4684932     8.408993     8.388557
2022.4876712     8.490549     8.461565
2022.5068493     8.575989     8.534906
2022.5260274     8.766246     8.601150
2022.5452055     8.714226     8.678291
2022.5643836     8.711288     8.763611
2022.5835616     8.752830     8.857439
2022.6027397     8.773405     8.946552
2022.6219178     8.911092     9.030417
2022.6410959     9.176871     9.128939
2022.6602740     9.335002     9.231206
2022.6794521     9.378009     9.348034
2022.6986301     9.521031     9.474704
2022.7178082     9.600927     9.578467
2022.7369863     9.631685     9.652630
2022.7561644     9.804281     9.705705
2022.7753425     9.913437     9.743780
2022.7945205     9.844961     9.751173
2022.8136986     9.844339     9.732214
2022.8328767     9.812675     9.704816
2022.8520548     9.720681     9.660910
2022.8712329     9.587569     9.626949
2022.8904110     9.430301     9.620973
2022.9095890     9.385100     9.616887
2022.9287671     9.409130     9.580030
2022.9479452     9.607781     9.545065
2022.9671233     9.791177     9.535684
2022.9863014     9.807569     9.529617
2023.0054795     9.480966     9.520155
2023.0246575     9.405993     9.490105
2023.0438356     9.503143     9.421677
2023.0630137     9.375693     9.319187
2023.0821918     9.299943     9.215191
2023.1013699     9.138679     9.149724
2023.1205479     8.991929     9.087888
2023.1397260     8.868769     9.003482
2023.1589041     8.871605     8.904094
2023.1780822     8.891766     8.812420
2023.1972603     8.849462     8.746269
2023.2164384     8.743493     8.692493
2023.2356164     8.481204     8.649048
2023.2547945     8.474873     8.623338
2023.2739726     8.543319     8.597190
2023.2931507     8.507949     8.574251
2023.3123288     8.477761     8.579942
2023.3315068     8.640220     8.631216
2023.3506849     8.656430     8.683025
2023.3698630     8.643007     8.720936
2023.3890411     8.794713     8.762397
2023.4082192     8.942672     8.815042
2023.4273973     8.941150     8.866837
2023.4465753     8.884518     8.925761
2023.4657534     8.881103     8.991478
2023.4849315     8.951568     9.054135
2023.5041096     9.106374     9.109060
2023.5232877     9.186740     9.205612
2023.5424658     9.234468     9.316555
2023.5616438     9.358622     9.424058
2023.5808219     9.436998     9.530129
2023.6000000     9.810119     9.625225
2023.6191781     9.883006     9.718618
2023.6383562     9.848626     9.821394
2023.6575342     9.906210     9.935896
2023.6767123     9.962233    10.068403
2023.6958904    10.027280    10.179147
2023.7150685    10.159452    10.300395
2023.7342466    10.389140    10.402000
2023.7534247    10.629563    10.471672
2023.7726027    10.806815    10.514241
2023.7917808    10.974233    10.538865
2023.8109589    10.763077    10.540138
2023.8301370    10.533255    10.503733
2023.8493151    10.345355    10.437130
2023.8684932    10.248897    10.353043
2023.8876712    10.170910    10.246123
2023.9068493    10.061493    10.157592
2023.9260274    10.030137    10.095962
2023.9452055    10.050028    10.046798
2023.9643836    10.011957    10.002210
2023.9835616     9.966293     9.984493
2024.0027322     9.978585     9.962838
2024.0218579     9.902878     9.914458
2024.0409836     9.847609     9.873640
2024.0601093    10.011455     9.852787
2024.0792350     9.866594     9.839197
2024.0983607     9.594722     9.817373
2024.1174863     9.682664     9.802847
2024.1366120     9.824280     9.797213
2024.1557377     9.843982     9.762522
2024.1748634     9.782171     9.719484
2024.1939891     9.772142     9.690296
2024.2131148     9.796909     9.652085
2024.2322404     9.699234     9.596616
2024.2513661     9.479254     9.545323
2024.2704918     9.332024     9.502983
2024.2896175     9.338771     9.458997
2024.3087432     9.325060     9.405849
2024.3278689     9.382344     9.365250
2024.3469945     9.401107     9.345048
2024.3661202     9.376272     9.359648
2024.3852459     9.318576     9.363654
2024.4043716     9.333840     9.372526
2024.4234973     9.297443     9.373843
2024.4426230     9.463421     9.393870
2024.4617486     9.374825     9.391143
2024.4808743     9.404906     9.392704
2024.5000000     9.394198     9.385875
2024.5191257     9.581344     9.385620
2024.5382514     9.351734     9.386903
2024.5573770     9.332621     9.420454
2024.5765027     9.272387     9.475203
2024.5956284     9.295147     9.537422
2024.6147541     9.474967     9.583949
2024.6338798     9.676779     9.649709
2024.6530055     9.897648     9.718249
2024.6721311     9.954176     9.814105
2024.6912568    10.000079     9.944010
2024.7103825     9.943578    10.074660
2024.7295082     9.949476    10.192399
2024.7486339    10.135099    10.270400
2024.7677596    10.464288    10.331300
2024.7868852    10.650815    10.398105
2024.8060109    10.736430    10.474081
2024.8251366    10.599662    10.538486
2024.8442623    10.502277    10.572415
2024.8633880    10.601320    10.570271
2024.8825137    10.627360    10.573363
2024.9016393    10.529120    10.570363
2024.9207650    10.440462    10.547786
2024.9398907    10.444998    10.553475
2024.9590164    10.678637    10.503926
2024.9781421    10.709428    10.427882
2024.9972678    10.396477    10.337625
2025.0164384    10.204930    10.137586
2025.0356164    10.019005    10.010824
2025.0547945     9.807061     9.901357
2025.0739726     9.628024     9.841723
2025.0931507     9.657126     9.830740
2025.1123288     9.664539     9.761623
2025.1315068     9.833695     9.710390
2025.1506849     9.919407     9.673552
2025.1698630     9.742876     9.661347
2025.1890411     9.582871     9.627103
2025.2082192     9.557910     9.583141
2025.2273973     9.475523     9.489028
2025.2465753     9.518179     9.381918
2025.2657534     9.348930     9.309183
2025.2849315     9.268876     9.259311
2025.3041096     8.986678     9.214268
2025.3232877     8.955417     9.188155
2025.3424658     9.088259     9.163751
2025.3616438     9.134028     9.154778
2025.3808219     9.152522     9.146255
2025.4000000     9.240501     9.142829
2025.4191781     9.298548     9.162078
2025.4383562     9.268172     9.156532
2025.4575342     9.192169     9.172259
2025.4767123     8.955842     9.182726
2025.4958904     9.128660     9.199781
2025.5150685     9.038344     9.249888
2025.5342466     9.275570     9.247602
2025.5534247     9.246730     9.255521
2025.5726027     9.394000     9.305468
2025.5917808     9.749503     9.340829`;


  // Convert to arrays, using the third column for a smoother long-term rise
  const lines = raw.split(/\r?\n/).filter(Boolean);
  const points = lines.map(line => line.trim().split(/\s+/).map(Number)).filter(cols => cols.length >= 3);

  const years = points.map(p => p[0]);
  const series = points.map(p => p[2]);

  // Update Sea Level metric with the latest delta relative to 1993 baseline
  const firstVal = series[0];
  const lastVal = series[series.length - 1];
  const delta = lastVal - firstVal; // likely in cm
  const seaMetric = document.getElementById('details-sea');
  if (seaMetric && isFinite(delta)) {
    seaMetric.textContent = `+${delta.toFixed(1)} cm`;
  }

  const ctx = canvas.getContext('2d');
  // gradient fill
  const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
  gradient.addColorStop(0, 'rgba(255,255,255,0.35)');
  gradient.addColorStop(1, 'rgba(255,255,255,0.05)');

  new Chart(ctx, {
    type: 'line',
    data: {
      labels: years.map(y => y.toFixed(2)),
      datasets: [
        {
          label: 'Global Mean Sea Level (cm, relative)',
          data: series,
          borderColor: 'rgba(255,255,255,0.9)',
          backgroundColor: gradient,
          tension: 0.35,
          pointRadius: 0,
          borderWidth: 2.25,
          fill: true,
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false,
          labels: {
            color: '#ffffff',
          }
        },
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            label: (ctx) => ` ${ctx.raw.toFixed(2)} cm`,
          }
        }
      },
      scales: {
        x: {
          ticks: { color: '#e8f3ff', maxRotation: 0, autoSkip: true, maxTicksLimit: 8, font: { size: 11 } },
          grid: { color: 'rgba(255,255,255,0.08)' }
        },
        y: {
          ticks: { color: '#e8f3ff', font: { size: 11 } },
          grid: { color: 'rgba(255,255,255,0.08)' }
        }
      }
    }
  });
}

document.addEventListener('DOMContentLoaded', initSeaLevelChart);

// Reveal-on-scroll for details cards


// Biodiversity loss chart
function initBiodiversityChart(){
  const canvas = document.getElementById('biodiversityChart');
  if (!canvas || typeof Chart === 'undefined') return;

  const ctx = canvas.getContext('2d');
  const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
  gradient.addColorStop(0, 'rgba(255,255,255,0.35)');
  gradient.addColorStop(1, 'rgba(255,255,255,0.10)');

  const labels = [
    '1970–2020 (Global)',
    'Latin America & Caribbean',
    'Africa',
    'Asia–Pacific',
    'Freshwater (Asia–Pacific)'
  ];
  const values = [73, 95, 76, 60, 85];

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'Population decline (%)',
        data: values,
        backgroundColor: gradient,
        borderColor: 'rgba(255,255,255,0.85)',
        borderWidth: 1,
        borderRadius: 8,
        barThickness: 18,
      }]
    },
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: (ctx) => ` ${ctx.raw}% decline`
          }
        },
        title: {
          display: true,
          text: 'Biodiversity decline by region',
          color: '#ffffff',
          font: { size: 14, weight: '600' }
        },
        subtitle: {
          display: true,
          text: 'Extinction rate ~10–100× background; projected climate-driven loss ~17% by 2100',
          color: 'rgba(255,255,255,0.85)',
          font: { size: 11 }
        }
      },
      scales: {
        x: {
          min: 0,
          max: 100,
          ticks: { color: '#e8f3ff', callback: (v) => v + '%' },
          grid: { color: 'rgba(255,255,255,0.08)' }
        },
        y: {
          ticks: { color: '#e8f3ff' },
          grid: { display: false }
        }
      }
    }
  });
}

document.addEventListener('DOMContentLoaded', initBiodiversityChart);

// CO2 Emissions by country chart (Top 20 by absolute emissions)
function initEmissionsChart(){
  const canvas = document.getElementById('emissionsChart');
  if (!canvas || typeof Chart === 'undefined') return;

  const raw = `China\t12,667,428,430\t−0.39%\t1,425,179,569\t8.89\t32.88%
United States\t4,853,780,240\t1.78%\t341,534,046\t14.21\t12.60%
India\t2,693,034,100\t6.52%\t1,425,423,212\t1.89\t6.99%
Russia\t1,909,039,310\t−1.22%\t145,579,899\t13.11\t4.96%
Japan\t1,082,645,430\t0.65%\t124,997,578\t8.66\t2.81%
Indonesia\t692,236,110\t13.14%\t278,830,529\t2.48\t1.80%
Iran\t686,415,730\t1.27%\t89,524,246\t7.67\t1.78%
Germany\t673,595,260\t−0.84%\t84,086,227\t8.01\t1.75%
South Korea\t635,502,970\t−1.15%\t51,782,512\t12.27\t1.65%
Saudi Arabia\t607,907,500\t2.93%\t32,175,352\t18.89\t1.58%
Canada\t582,072,950\t3.57%\t38,821,259\t14.99\t1.51%
Mexico\t487,774,010\t10.4%\t128,613,117\t3.79\t1.27%
Turkey\t481,247,520\t3.1%\t87,058,473\t5.53\t1.25%
`;

  // Parse rows: name, emissions, yoy, population, perCapita, share
  const rows = raw.split(/\r?\n/).filter(Boolean).map(r => r.split(/\t/));
  const parsed = rows.map(([name, emissionsStr, yoy, popStr, perCap, shareStr]) => {
    const emissions = parseFloat(emissionsStr.replace(/,/g, ''));
    const population = parseFloat(popStr.replace(/,/g, ''));
    const perCapita = parseFloat(perCap);
    const share = parseFloat((shareStr||'0').replace(/%/g, ''));
    return { name, emissions, yoy, population, perCapita, share };
  }).filter(d => Number.isFinite(d.emissions));

  // Sort descending by emissions and keep top 20 (already truncated data)
  const top = parsed.sort((a,b)=>b.emissions - a.emissions).slice(0, 20);

  const labels = top.map(d => d.name);
  const values = top.map(d => d.emissions / 1e9); // convert to billions tonnes (or equivalent units given input)

  const ctx = canvas.getContext('2d');
  const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
  gradient.addColorStop(0, 'rgba(255,255,255,0.35)');
  gradient.addColorStop(1, 'rgba(255,255,255,0.10)');

  new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'CO₂ emissions (billions)',
        data: values,
        backgroundColor: gradient,
        borderColor: 'rgba(255,255,255,0.85)',
        borderWidth: 1,
        borderRadius: 8,
        barThickness: 18,
      }]
    },
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip: {
          callbacks: {
            label: (ctx) => {
              const d = top[ctx.dataIndex];
              const val = ctx.raw;
              return [
                ` ${val.toFixed(2)} B`,
                ` Per capita: ${d.perCapita} t`,
                ` Share: ${d.share}%`
              ];
            }
          }
        },
        title: {
          display: true,
          text: 'Top emitters by absolute CO₂',
          color: '#ffffff',
          font: { size: 14, weight: '600' }
        }
      },
      scales: {
        x: {
          ticks: { color: '#e8f3ff' },
          grid: { color: 'rgba(255,255,255,0.08)' }
        },
        y: {
          ticks: { color: '#e8f3ff' },
          grid: { display: false }
        }
      }
    }
  });
}

document.addEventListener('DOMContentLoaded', initEmissionsChart);


document.addEventListener('DOMContentLoaded', () => {
  const input = document.getElementById('cfp-input');
  const button = document.getElementById('cfp-btn');
  const valueEl = document.getElementById('cfp-value');
  const unitEl = document.querySelector('#cfp-value .calc-unit');
  const noteEl = document.getElementById('cfp-text');
  const factEl = document.getElementById('cfp-fact');
  const imgUrlEl = document.getElementById('cfp-img-url');
  const imgFileEl = document.getElementById('cfp-img-file');
  const imgBtnEl = document.getElementById('cfp-img-btn');
  const previewEl = document.getElementById('cfp-preview');
  const loadingEl = document.getElementById('cfp-loading');

  if (!input || !button || !valueEl) return;

 
  if (unitEl) unitEl.textContent = ' kg CO₂';

  const PRODUCTS = [
    { keys: ['t-shirt','cotton t shirt','cotton tshirt','cotton shirt'], kg: 2.1, note: 'The estimated carbon footprint of producing a cotton T‑shirt.' , fact: 'A cotton T‑shirt needs about 2,700 liters of water to produce.'}
  ];

  function findProduct(query){
    const q = (query || '').toLowerCase().trim();
    if (!q) return null;
    for (const item of PRODUCTS){
      if (item.keys.some(k => q.includes(k))) return item;
    }
    return null;
  }

  function renderResult(kg, note, fact){
    const num = Number(kg);
    const display = Number.isFinite(num) ? num.toFixed(num >= 10 ? 0 : 1) : '—';
    valueEl.firstChild.nodeValue = display + ' ';
    if (unitEl) unitEl.textContent = 'kg CO₂';
    if (noteEl && note) noteEl.textContent = note;
    if (factEl && fact) factEl.textContent = fact;
  }
 



  async function fetchOpenRouterEstimate(query) {
    const apiKey =  "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"||
      localStorage.getItem("OPENROUTER_API_KEY");
    if (!apiKey) return null;
  
    const endpoint =
      window.OPENROUTER_PROXY_URL || "https://openrouter.ai/api/v1/chat/completions";
  
    const body = {
      model: "google/gemma-3n-e2b-it:free",
      messages: [
        {
          role: "user",
          content: `Estimate the cradle-to-gate carbon footprint (kg CO2e) for: ${query}. Respond with JSON containing: {"kg": number, "note": "description", "fact": "environmental tip"}`,
        },
      ],
      temperature: 0.1,
      top_p: 0.9,
    };
  
    try {
      const res = await fetch(endpoint, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });
  
      if (!res.ok) throw new Error("OpenRouter error");
  
      const data = await res.json();
      const content = data?.choices?.[0]?.message?.content || "";
     
      
      if (typeof content !== "string") return null;
  
      // Try multiple parsing strategies for the JSON response
      let parsed = null;
      
      // Strategy 1: Look for JSON in markdown code blocks
      const codeBlockMatch = content.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
      if (codeBlockMatch) {
        try {
          parsed = JSON.parse(codeBlockMatch[1]);
        } catch (e) {
          console.warn('Failed to parse JSON from code block:', e);
        }
      }
      
      // Strategy 2: Look for any JSON object in the content
      if (!parsed) {
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            parsed = JSON.parse(jsonMatch[0]);
          } catch (e) {
            console.warn('Failed to parse JSON object:', e);
          }
        }
      }
      
      // Strategy 3: Try parsing the entire content as JSON
      if (!parsed) {
        try {
          parsed = JSON.parse(content);
        } catch (e) {
          console.warn('Failed to parse entire content as JSON:', e);
        }
      }
      
      // Validate the parsed result has the expected structure
      if (parsed && (typeof parsed.kg !== "undefined" || typeof parsed.cradle_to_gate_CO2e_kg !== "undefined")) {
        // Handle different possible field names
        const kg = parsed.kg || parsed.cradle_to_gate_CO2e_kg;
        const note = parsed.note || parsed.notes || parsed.description;
        const fact = parsed.fact || parsed.tip || parsed.environmental_tip;
        
        return {
          kg: kg,
          note: note,
          fact: fact
        };
      }
      
      console.warn('No valid JSON structure found in response');
      return null;
    } catch (err) {
      console.warn("OpenRouter fetch failed", err);
      return null;
    }
  }

  async function fetchOpenRouterEstimateFromImage(imageUrl) {
    const apiKey =
      "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" ||
      localStorage.getItem("OPENROUTER_API_KEY");
    if (!apiKey) return null;
  
    const endpoint =
      window.OPENROUTER_PROXY_URL || "https://openrouter.ai/api/v1/chat/completions";
  
    const body = {
      model: "openai/gpt-4o-mini",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Analyze this image and estimate the cradle-to-gate carbon footprint (kg CO2e) for the main product shown. Respond with JSON containing: {"kg": number, "note": "description", "fact": "environmental tip"}`
            },
            {
              type: "image_url",
              image_url: {
                url: imageUrl
              }
            }
          ]
        },
      ],
      temperature: 0.1,
      top_p: 0.9,
    };
  
    try {
      const res = await fetch(endpoint, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${apiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });
  
      if (!res.ok) throw new Error("OpenRouter error");
  
      const data = await res.json();
      const content = data?.choices?.[0]?.message?.content || "";
     
      // Use the same parsing logic as the text function
      return parseApiResponse(content);
    } catch (err) {
      console.warn("OpenRouter image fetch failed", err);
      return null;
    }
  }

  function parseApiResponse(content) {
    if (typeof content !== "string") return null;

    let parsed = null;
    
    // Strategy 1: Look for JSON in markdown code blocks
    const codeBlockMatch = content.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
    if (codeBlockMatch) {
      try {
        parsed = JSON.parse(codeBlockMatch[1]);
      } catch (e) {
        console.warn('Failed to parse JSON from code block:', e);
      }
    }
    
    // Strategy 2: Look for any JSON object in the content
    if (!parsed) {
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          parsed = JSON.parse(jsonMatch[0]);
        } catch (e) {
          console.warn('Failed to parse JSON object:', e);
        }
      }
    }
    
    // Strategy 3: Try parsing the entire content as JSON
    if (!parsed) {
      try {
        parsed = JSON.parse(content);
      } catch (e) {
        console.warn('Failed to parse entire content as JSON:', e);
      }
    }
    
    // Validate and normalize the parsed result
    if (parsed && (typeof parsed.kg !== "undefined" || typeof parsed.cradle_to_gate_CO2e_kg !== "undefined")) {
      const kg = parsed.kg || parsed.cradle_to_gate_CO2e_kg;
      const note = parsed.note || parsed.notes || parsed.description;
      const fact = parsed.fact || parsed.tip || parsed.environmental_tip;
      
      return {
        kg: kg,
        note: note,
        fact: fact
      };
    }
    
    return null;
  }

  async function calculate(){
    const q = input.value;
    if (!q.trim()) return;
    
    // Disable button and show loading state
    button.disabled = true;
    button.textContent = 'Calculating...';
    
    try{
      setLoading(true);
      const remote = await fetchOpenRouterEstimate(q);
      if (remote && Number.isFinite(Number(remote.kg))){
        renderResult(remote.kg, remote.note || 'Model estimate (kg CO₂e).', remote.fact || 'Consider repair, reuse, and efficiency.');
        return;
      }
      const item = findProduct(q);
      if (item){
        renderResult(item.kg, item.note, item.fact);
      } else {
        renderResult('—', 'Try items like T‑shirt, Jeans, Smartphone, Coffee.', 'Small daily choices add up—choose repair, reuse, and low‑carbon options.');
      }
    } finally {
      setLoading(false);
      // Re-enable button and restore original state
      button.disabled = false;
      button.textContent = 'Calculate';
    }
  }

  button.addEventListener('click', calculate);
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') calculate();
  });

  function setLoading(isLoading){
    if (!loadingEl) return;
    loadingEl.classList.toggle('hidden', !isLoading);
  }

  async function analyzeImage(){
    const urlField = (imgUrlEl && imgUrlEl.value || '').trim();
    const file = imgFileEl && imgFileEl.files && imgFileEl.files[0];
    if (!urlField && !file) return;

    const run = async (imageUrl) => {
      if (previewEl && imageUrl){
        previewEl.src = imageUrl;
        previewEl.classList.remove('hidden');
      }
      try{
        setLoading(true);
        const remote = await fetchOpenRouterEstimateFromImage(imageUrl);
        if (remote && Number.isFinite(Number(remote.kg))){
          renderResult(remote.kg, remote.note || 'Model estimate (kg CO₂e) from image.', remote.fact || 'Consider repair, reuse, and efficiency.');
        } else {
          renderResult('—', 'Could not parse result from image.', 'Try a clearer product image or use the text search.');
        }
      } finally {
        setLoading(false);
      }
    };

    if (file){
      const reader = new FileReader();
      reader.onload = () => run(reader.result);
      reader.readAsDataURL(file);
    } else {
      await run(urlField);
    }
  }

  if (imgBtnEl) imgBtnEl.addEventListener('click', analyzeImage);
  
  // Show example automatically when page loads
  function showExample() {
    // Set example text - only t-shirt example
    const examples = ['t-shirt'];
    let currentExample = 0;
    
    function showNextExample() {
      if (currentExample < examples.length) {
        input.value = examples[currentExample];
        calculate();
        currentExample++;
        
        // Show next example after 3 seconds
        if (currentExample < examples.length) {
          setTimeout(showNextExample, 3000);
        }
      }
    }
    
    // Start showing examples after a short delay
    setTimeout(showNextExample, 1000);
  }
  
  // Show example when page loads
  showExample();
});

async function Newsdata() {
  try {
      console.log('[News] Fetching latest news...');
      let api = "https://news-api.ykumawat006-372.workers.dev/";
      let res = await fetch(api);
      let data = await res.json();
      
     
      
      // Check if data has the expected structure
      if (data && Array.isArray(data) && data.length > 0) {
        // Create news ticker
        console.log(`[News] Using array data with ${data.length} items`);
        createNewsTicker(data);
      } else if (data && data.articles && Array.isArray(data.articles)) {
        // Handle case where API returns {articles: [...]}
        console.log(`[News] Using articles data with ${data.articles.length} items`);
        createNewsTicker(data.articles);
      } else {
        // Fallback with sample data
        console.warn('API returned unexpected data structure, using fallback');
        const fallbackData = [
          {
            title: "Climate Action Needed",
            description: "Global efforts to combat climate change continue as temperatures rise",
            urlToImage: "https://placehold.co/60x60?text=Wait",
            url: "https://www.un.org/en/climatechange"
          },
          {
            title: "Renewable Energy Growth",
            description: "Solar and wind power adoption reaches new heights worldwide",
            urlToImage: "https://placehold.co/60x60?text=Wait",
            url: "https://www.irena.org/"
          },
          {
            title: "Ocean Conservation",
            description: "New initiatives launched to protect marine ecosystems",
            urlToImage: "https://placehold.co/60x60?text=Wait",
            url: "https://oceanservice.noaa.gov/"
          }
        ];
        createNewsTicker(fallbackData);
      }
      
  } catch (error) {
      console.error('Error fetching news:', error);
      // Show fallback data on error
      const fallbackData = [
        {
          title: "Climate News Update",
          description: "Stay informed about our planet's health",
          urlToImage: "https://placehold.co/60x60?text=Wait",
          url: "https://www.climate.gov/"
        }
      ];
      console.log('[News] Using fallback data');
      createNewsTicker(fallbackData);
  }
}

function createNewsTicker(newsData) {
  const containers = ['News-page', 'News-page-phone']
    .map(id => document.getElementById(id))
    .filter(Boolean);

  if (containers.length === 0 || !newsData || !Array.isArray(newsData)) {
    console.error('Invalid news data or container not found');
    return;
  }
  console.log(`[News] Initializing ticker in ${containers.length} container(s)`);

  function startTickerForContainer(newsContainer) {
    // Add loaded class to hide loading spinner
    newsContainer.classList.add('loaded');

    let currentIndex = 0;
    const hasGsap = typeof window !== 'undefined' && typeof window.gsap !== 'undefined';

    function showNextNews() {
      // Clear previous news
      newsContainer.innerHTML = '';

      if (currentIndex >= newsData.length) {
        currentIndex = 0; // Loop back to start
      }

      const news = newsData[currentIndex];
      if (!news) return;

      // Create news item
      const newsItem = document.createElement('div');
      newsItem.className = 'news-item';
      newsItem.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        padding: 0 20px;
        box-sizing: border-box;
        opacity: 0;
        transform: translateX(100%);
        cursor: pointer;
        transition: background-color 0.2s ease;
      `;

      // Add click event to navigate to news URL
      newsItem.addEventListener('click', () => {
        if (news.url) {
          window.open(news.url, '_blank');
        }
      });

      // Add hover effect
      newsItem.addEventListener('mouseenter', () => {
        newsItem.style.backgroundColor = '#f5f5f5';
      });

      newsItem.addEventListener('mouseleave', () => {
        newsItem.style.backgroundColor = 'transparent';
      });

      // Create image container
      const imageContainer = document.createElement('div');
      imageContainer.className = 'news-image';
      imageContainer.style.cssText = `
        width: 60px;
        height: 60px;
        border-radius: 10px;
        overflow: hidden;
        margin-right: 15px;
        flex-shrink: 0;
      `;

      // Create image
      const img = document.createElement('img');
      img.src = news.urlToImage || 'https://placehold.co/60x60?text=Wait';
      img.alt = news.title || 'Climate News';
      img.style.cssText = `
        width: 100%;
        height: 100%;
        object-fit: cover;
      `;
      img.onerror = () => {
        img.src = 'https://placehold.co/60x60?text=Wait';
      };

      // Create text container
      const textContainer = document.createElement('div');
      textContainer.className = 'news-text';
      textContainer.style.cssText = `
        flex: 1;
        overflow: hidden;
      `;

      // Create title
      const title = document.createElement('div');
      title.className = 'news-title';
      title.textContent = news.title || 'Climate News Update';
      title.style.cssText = `
        font-size: 14px;
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      `;

      // Create description
      const description = document.createElement('div');
      description.className = 'news-description';
      description.textContent = news.description || 'Stay updated with the latest climate news';
      description.style.cssText = `
        font-size: 12px;
        color: #666;
        line-height: 1.3;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      `;

      // Assemble the news item
      imageContainer.appendChild(img);
      textContainer.appendChild(title);
      textContainer.appendChild(description);
      newsItem.appendChild(imageContainer);
      newsItem.appendChild(textContainer);

      // Add to container
      newsContainer.appendChild(newsItem);

      if (hasGsap) {
        // GSAP animation for entrance
        gsap.fromTo(newsItem,
          {
            x: '100%',
            opacity: 0
          },
          {
            x: '0%',
            opacity: 1,
            duration: 0.8,
            ease: 'power2.out',
            onComplete: () => {
              setTimeout(() => {
                gsap.to(newsItem, {
                  x: '-100%',
                  opacity: 0,
                  duration: 0.8,
                  ease: 'power2.in',
                  onComplete: () => {
                    newsItem.remove();
                    currentIndex++;
                    showNextNews();
                  }
                });
              }, 2500);
            }
          }
        );
      } else {
        // Fallback without GSAP: just show, wait, then cycle
        newsItem.style.opacity = '1';
        newsItem.style.transform = 'translateX(0%)';
        setTimeout(() => {
          newsItem.remove();
          currentIndex++;
          showNextNews();
        }, 2500);
      }
    }

    // Start the news ticker
    showNextNews();
  }

  containers.forEach(startTickerForContainer);
}

Newsdata();


